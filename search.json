[{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"European Union Public Licence v. 1.2","title":"European Union Public Licence v. 1.2","text":"EUPL © European Union 2007, 2016 European Union Public Licence (EUPL) applies Work (defined ) provided terms Licence. use Work, authorised Licence prohibited (extent use covered right copyright holder Work). Work provided terms Licence Licensor (defined ) placed following notice immediately following copyright notice Work: Licensed EUPL expressed means willingness license EUPL.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"","what":"1. Definitions","title":"European Union Public Licence v. 1.2","text":"Licence, following terms following meaning: * Licence:Licence. * Original Work:work software distributed communicated Licensor Licence, available Source Code also Executable Code case may . * Derivative Works:works software created Licensee, based upon Original Work modifications thereof. Licence define extent modification dependence Original Work required order classify work Derivative Work; extent determined copyright law applicable country mentioned Article 15. * Work:Original Work Derivative Works. * Source Code:human-readable form Work convenient people study modify. * Executable Code:code generally compiled meant interpreted computer program. * Licensor:natural legal person distributes communicates Work Licence. * Contributor(s):natural legal person modifies Work Licence, otherwise contributes creation Derivative Work. * Licensee :natural legal person makes usage Work terms Licence. * Distribution Communication:act selling, giving, lending, renting, distributing, communicating, transmitting, otherwise making available, online offline, copies Work providing access essential functionalities disposal natural legal person.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_2-scope-of-the-rights-granted-by-the-licence","dir":"","previous_headings":"","what":"2. Scope of the rights granted by the Licence","title":"European Union Public Licence v. 1.2","text":"Licensor hereby grants worldwide, royalty-free, non-exclusive, sublicensable licence following, duration copyright vested Original Work: * use Work circumstance usage, * reproduce Work, * modify Work, make Derivative Works based upon Work, * communicate public, including right make available display Work copies thereof public perform publicly, case may , Work, * distribute Work copies thereof, * lend rent Work copies thereof, * sublicense rights Work copies thereof. rights can exercised media, supports formats, whether now known later invented, far applicable law permits . countries moral rights apply, Licensor waives right exercise moral right extent allowed law order make effective licence economic rights listed. Licensor grants Licensee royalty-free, non-exclusive usage rights patents held Licensor, extent necessary make use rights granted Work Licence.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_3-communication-of-the-source-code","dir":"","previous_headings":"","what":"3. Communication of the Source Code","title":"European Union Public Licence v. 1.2","text":"Licensor may provide Work either Source Code form, Executable Code. Work provided Executable Code, Licensor provides addition machine-readable copy Source Code Work along copy Work Licensor distributes indicates, notice following copyright notice attached Work, repository Source Code easily freely accessible long Licensor continues distribute communicate Work.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_4-limitations-on-copyright","dir":"","previous_headings":"","what":"4. Limitations on copyright","title":"European Union Public Licence v. 1.2","text":"Nothing Licence intended deprive Licensee benefits exception limitation exclusive rights rights owners Work, exhaustion rights applicable limitations thereto.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_5-obligations-of-the-licensee","dir":"","previous_headings":"","what":"5. Obligations of the Licensee","title":"European Union Public Licence v. 1.2","text":"grant rights mentioned subject restrictions obligations imposed Licensee. obligations following: Attribution right: Licensee shall keep intact copyright, patent trademarks notices notices refer Licence disclaimer warranties. Licensee must include copy notices copy Licence every copy Work /distributes communicates. Licensee must cause Derivative Work carry prominent notices stating Work modified date modification. Copyleft clause: Licensee distributes communicates copies Original Works Derivative Works, Distribution Communication done terms Licence later version Licence unless Original Work expressly distributed version Licence — example communicating EUPL v. 1.2 . Licensee (becoming Licensor) offer impose additional terms conditions Work Derivative Work alter restrict terms Licence. Compatibility clause: Licensee Distributes Communicates Derivative Works copies thereof based upon Work another work licensed Compatible Licence, Distribution Communication can done terms Compatible Licence. sake clause, Compatible Licence refers licences listed appendix attached Licence. Licensee’s obligations Compatible Licence conflict /obligations Licence, obligations Compatible Licence shall prevail. Provision Source Code: distributing communicating copies Work, Licensee provide machine-readable copy Source Code indicate repository Source easily freely available long Licensee continues distribute communicate Work. Legal Protection: Licence grant permission use trade names, trademarks, service marks, names Licensor, except required reasonable customary use describing origin Work reproducing content copyright notice.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_6-chain-of-authorship","dir":"","previous_headings":"","what":"6. Chain of Authorship","title":"European Union Public Licence v. 1.2","text":"original Licensor warrants copyright Original Work granted hereunder owned /licensed //power authority grant Licence. Contributor warrants copyright modifications /brings Work owned /licensed //power authority grant Licence. time accept Licence, original Licensor subsequent Contributors grant licence contributions Work, terms Licence.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"","what":"7. Disclaimer of Warranty","title":"European Union Public Licence v. 1.2","text":"Work work progress, continuously improved numerous Contributors. finished work may therefore contain defects bugs inherent type development. reason, Work provided Licence basis without warranties kind concerning Work, including without limitation merchantability, fitness particular purpose, absence defects errors, accuracy, non-infringement intellectual property rights copyright stated Article 6 Licence. disclaimer warranty essential part Licence condition grant rights Work.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_8-disclaimer-of-liability","dir":"","previous_headings":"","what":"8. Disclaimer of Liability","title":"European Union Public Licence v. 1.2","text":"Except cases wilful misconduct damages directly caused natural persons, Licensor event liable direct indirect, material moral, damages kind, arising Licence use Work, including without limitation, damages loss goodwill, work stoppage, computer failure malfunction, loss data commercial damage, even Licensor advised possibility damage. However, Licensor liable statutory product liability laws far laws apply Work.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_9-additional-agreements","dir":"","previous_headings":"","what":"9. Additional agreements","title":"European Union Public Licence v. 1.2","text":"distributing Work, may choose conclude additional agreement, defining obligations services consistent Licence. However, accepting obligations, may act behalf sole responsibility, behalf original Licensor Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted Contributor fact accepted warranty additional liability.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_10-acceptance-of-the-licence","dir":"","previous_headings":"","what":"10. Acceptance of the Licence","title":"European Union Public Licence v. 1.2","text":"provisions Licence can accepted clicking icon agree placed bottom window displaying text Licence affirming consent similar way, accordance rules applicable law. Clicking icon indicates clear irrevocable acceptance Licence terms conditions. Similarly, irrevocably accept Licence terms conditions exercising rights granted Article 2 Licence, use Work, creation Derivative Work Distribution Communication Work copies thereof.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_11-information-to-the-public","dir":"","previous_headings":"","what":"11. Information to the public","title":"European Union Public Licence v. 1.2","text":"case Distribution Communication Work means electronic communication (example, offering download Work remote location) distribution channel media (example, website) must least provide public information requested applicable law regarding Licensor, Licence way may accessible, concluded, stored reproduced Licensee.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_12-termination-of-the-licence","dir":"","previous_headings":"","what":"12. Termination of the Licence","title":"European Union Public Licence v. 1.2","text":"Licence rights granted hereunder terminate automatically upon breach Licensee terms Licence. termination terminate licences person received Work Licensee Licence, provided persons remain full compliance Licence.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_13-miscellaneous","dir":"","previous_headings":"","what":"13. Miscellaneous","title":"European Union Public Licence v. 1.2","text":"Without prejudice Article 9 , Licence represents complete agreement Parties Work. provision Licence invalid unenforceable applicable law, affect validity enforceability Licence whole. provision construed reformed necessary make valid enforceable. European Commission may publish linguistic versions new versions Licence updated versions Appendix, far required reasonable, without reducing scope rights granted Licence. New versions Licence published unique version number. linguistic versions Licence, approved European Commission, identical value. Parties can take advantage linguistic version choice.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_14-jurisdiction","dir":"","previous_headings":"","what":"14. Jurisdiction","title":"European Union Public Licence v. 1.2","text":"Without prejudice specific agreement parties, * litigation resulting interpretation License, arising European Union institutions, bodies, offices agencies, Licensor, Licensee, subject jurisdiction Court Justice European Union, laid article 272 Treaty Functioning European Union, * litigation arising parties resulting interpretation License, subject exclusive jurisdiction competent court Licensor resides conducts primary business.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"id_15-applicable-law","dir":"","previous_headings":"","what":"15. Applicable Law","title":"European Union Public Licence v. 1.2","text":"Without prejudice specific agreement parties, * Licence shall governed law European Union Member State Licensor seat, resides registered office, * licence shall governed Belgian law Licensor seat, residence registered office inside European Union Member State.","code":""},{"path":"https://inedifusion.github.io/ineapir/LICENSE.html","id":"appendix","dir":"","previous_headings":"","what":"Appendix","title":"European Union Public Licence v. 1.2","text":"Compatible Licences according Article 5 EUPL : GNU General Public License (GPL) v. 2, v. 3 GNU Affero General Public License (AGPL) v. 3 Open Software License (OSL) v. 2.1, v. 3.0 Eclipse Public License (EPL) v. 1.0 CeCILL v. 2.0, v. 2.1 Mozilla Public Licence (MPL) v. 2 GNU Lesser General Public Licence (LGPL) v. 2.1, v. 3 Creative Commons Attribution-ShareAlike v. 3.0 Unported (CC -SA 3.0) works software European Union Public Licence (EUPL) v. 1.1, v. 1.2 Québec Free Open-Source Licence — Reciprocity (LiLiQ-R) Strong Reciprocity (LiLiQ-R+). European Commission may update Appendix later versions licences without producing new version EUPL, long provide rights granted Article 2 Licence protect covered Source Code exclusive appropriation. changes additions Appendix require production new EUPL version.","code":""},{"path":"https://inedifusion.github.io/ineapir/articles/classifications.html","id":"classifications","dir":"Articles","previous_headings":"","what":"Classifications","title":"Classifications and hierarchy trees","text":"variables whose values can change time. example name municipality. cases, concept classifications, allows access values specific classification. can request available classifications get_metadata_classifications() function. case municipalities, classification year, can retrieve municipalities particular year using get_metadata_values() function classification argument.","code":"library(ineapir)  # Get classifications classifications <- get_metadata_classifications(lang = \"EN\") head(classifications) #>   Id          Nombre        Fecha #> 1  1         CNAE 93 7.258428e+11 #> 2  2       CNAE 2009 1.230764e+12 #> 3  3         CNAE 74 1.262268e+11 #> 4  5 CPI System 1976 2.209212e+11 #> 5  6 CPI System 1983 4.417596e+11 #> 6  7 CPI System 1992 7.258428e+11 # Select the classifications with name 'Geographical yyyy' classifications <- get_metadata_classifications(lang = \"EN\") head(classifications[grepl(\"geographical\", classifications$Nombre,                            ignore.case = TRUE),]) #>    Id            Nombre        Fecha #> 24 29 Geographical 2007 1.199142e+12 #> 25 30 Geographical 2008 1.230764e+12 #> 26 31 Geographical 2009 1.262300e+12 #> 27 32 Geographical 2010 1.293836e+12 #> 28 33 Geographical 2011 1.325372e+12 #> 29 34 Geographical 2012 1.356995e+12  # Municipalities: id=19 # To retrieve the municipalities of 2007 we use the classificacion with id=29 municipalities <- get_metadata_values(variable = 19, classification = 29) head(municipalities) #>    Id Fk_Variable        Nombre Codigo FK_JerarquiaPadres #> 1 456          19    Orbaitzeta  31195         32, 392378 #> 2 457          19        Orbara  31196         32, 392378 #> 3 458          19      Orísoain  31197         32, 392381 #> 4 459          19 Oronz/Orontze  31198         32, 392378 #> 5 460          19   Oroz-Betelu  31199         32, 392378 #> 6 461          19        Oteiza  31200         32, 392377"},{"path":"https://inedifusion.github.io/ineapir/articles/classifications.html","id":"hierarchy-trees","dir":"Articles","previous_headings":"","what":"Hierarchy trees","title":"Classifications and hierarchy trees","text":"certain values belong hierarchical structure can parents children. obtain children specific value, can use get_metadata_values() function variable value arguments. example, want find provinces Galicia: want go deeper hierarchical structure can use hierarchy argument, represents depth. want root tree variable, specify value. Additionally, can filter variables values interest us filter argument. Example 1. Example 2. Example 3. Example 4.","code":"# Variable: Autonomous communities (id=70) # Value: Galicia (id=9008) # Get the children of id=9008 (provinces of Galicia) provinces <- get_metadata_values(variable = 70, value = 9008) provinces #>   Id Fk_Variable     Nombre Codigo FK_JerarquiaPadres #> 1 16         115  Coruña, A     15               9008 #> 2 28         115       Lugo     27               9008 #> 3 36         115 Pontevedra     36               9008 #> 4 53         115    Ourense     32               9008 # Variable: Autonomous communities (id=70) # Value: Galicia (id=9008) # Get the children of each province (municipalities of Galicia) municipalities <- get_metadata_values(variable = 70, value = 9008, hierarchy = 1) head(municipalities) #>   Id_0 Fk_Variable_0  Nombre_0 Codigo_0 FK_JerarquiaPadres_0 Id_1 Fk_Variable_1 #> 1   16           115 Coruña, A       15                 9008 3403            19 #> 2   16           115 Coruña, A       15                 9008 4508            19 #> 3   16           115 Coruña, A       15                 9008 4509            19 #> 4   16           115 Coruña, A       15                 9008 4510            19 #> 5   16           115 Coruña, A       15                 9008 4511            19 #> 6   16           115 Coruña, A       15                 9008 4512            19 #>   Nombre_1 Codigo_1 FK_JerarquiaPadres_1 #> 1  Sobrado    15080           16, 392352 #> 2     Ares    15004           16, 392350 #> 3  Arteixo    15005           16, 392350 #> 4    Arzúa    15006           16, 392352 #> 5  Baña, A    15007           16, 392351 #> 6 Bergondo    15008           16, 392350 # Variable: Autonomous communities (id=70) # Get the children of each Autonomous communities (provinces) provinces <- get_metadata_values(variable = 70, hierarchy = 1) head(provinces) #>   Id_0 Fk_Variable_0  Nombre_0 Codigo_0  FK_JerarquiaPadres_0 Id_1 #> 1 8995            70   Melilla       19 16473, 274511, 274508   52 #> 2 8997            70 Andalucía       01 16473, 274511, 274508    5 #> 3 8997            70 Andalucía       01 16473, 274511, 274508   12 #> 4 8997            70 Andalucía       01 16473, 274511, 274508   15 #> 5 8997            70 Andalucía       01 16473, 274511, 274508   19 #> 6 8997            70 Andalucía       01 16473, 274511, 274508   22 #>   Fk_Variable_1 Nombre_1 Codigo_1 FK_JerarquiaPadres_1 #> 1           115  Melilla       52                 8995 #> 2           115  Almería       04                 8997 #> 3           115    Cádiz       11                 8997 #> 4           115  Córdoba       14                 8997 #> 5           115  Granada       18                 8997 #> 6           115   Huelva       21                 8997 # We define the filter as a list of variables and values filter <- list(\"70\" = 9008 # variable id = 70, value id = 9008 (Galicia)                ) # Get the children of id=9008 (provinces of Galicia) provinces <- get_metadata_values(variable = 70, filter = filter, hierarchy = 1,                                  validate = FALSE) head(provinces) #>   Id_0 Fk_Variable_0 Nombre_0 Codigo_0  FK_JerarquiaPadres_0 Id_1 Fk_Variable_1 #> 1 9008            70  Galicia       12 16473, 274511, 274508   16           115 #> 2 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 3 9008            70  Galicia       12 16473, 274511, 274508   36           115 #> 4 9008            70  Galicia       12 16473, 274511, 274508   53           115 #>     Nombre_1 Codigo_1 FK_JerarquiaPadres_1 #> 1  Coruña, A       15                 9008 #> 2       Lugo       27                 9008 #> 3 Pontevedra       36                 9008 #> 4    Ourense       32                 9008 # We define the filter as a list of variables and values filter <- list(\"115\" =  \"\" # variable id = 115, all values                ) # Get the children of id=70 (provinces of Spain) provinces <- get_metadata_values(variable = 70, filter = filter, hierarchy = 1,                                  validate = FALSE) head(provinces) #>   Id_0 Fk_Variable_0  Nombre_0 Codigo_0  FK_JerarquiaPadres_0 Id_1 #> 1 8995            70   Melilla       19 16473, 274511, 274508   52 #> 2 8997            70 Andalucía       01 16473, 274511, 274508    5 #> 3 8997            70 Andalucía       01 16473, 274511, 274508   12 #> 4 8997            70 Andalucía       01 16473, 274511, 274508   15 #> 5 8997            70 Andalucía       01 16473, 274511, 274508   19 #> 6 8997            70 Andalucía       01 16473, 274511, 274508   22 #>   Fk_Variable_1 Nombre_1 Codigo_1 FK_JerarquiaPadres_1 #> 1           115  Melilla       52                 8995 #> 2           115  Almería       04                 8997 #> 3           115    Cádiz       11                 8997 #> 4           115  Córdoba       14                 8997 #> 5           115  Granada       18                 8997 #> 6           115   Huelva       21                 8997 # We define the filter as a list of variables and values filter <- list(\"70\" = 9008, # variable id = 70, value id = 9008 (Galicia)                 \"115\" = 28 # variable id = 115, value id = 28 (Lugo)                ) # Get the children of id=28 (municipalities of Lugo province) municipalities <- get_metadata_values(variable = 70, filter = filter,                                        hierarchy = 2, validate = FALSE) head(municipalities) #>   Id_0 Fk_Variable_0 Nombre_0 Codigo_0  FK_JerarquiaPadres_0 Id_1 Fk_Variable_1 #> 1 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 2 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 3 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 4 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 5 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 6 9008            70  Galicia       12 16473, 274511, 274508   28           115 #>   Nombre_1 Codigo_1 FK_JerarquiaPadres_1 Id_2 Fk_Variable_2      Nombre_2 #> 1     Lugo       27                 9008  570            19          Lugo #> 2     Lugo       27                 9008 2780            19       Vilalba #> 3     Lugo       27                 9008 2781            19       Baralla #> 4     Lugo       27                 9008 2967            19        Abadín #> 5     Lugo       27                 9008 2968            19         Alfoz #> 6     Lugo       27                 9008 2969            19 Antas de Ulla #>   Codigo_2 FK_JerarquiaPadres_2 #> 1    27028           28, 392355 #> 2    27065           28, 392353 #> 3    27901           28, 392356 #> 4    27001           28, 392353 #> 5    27002           28, 392354 #> 6    27003           28, 392355 # We define the filter as a list of variables and values filter <- list(\"70\" = 9008, # variable id = 70, value id = 9008 (Galicia)                  \"115\" =  28 , # variable id = 115, value id = 28 (Lugo)                \"19\" = 570 # variable id = 19, value id = 570 (Lugo)                ) # Get the children of id=570 (census sections of Lugo municipality) sections <- get_metadata_values(variable = 70, filter = filter, hierarchy = 4,                                 validate = FALSE) head(sections) #>   Id_0 Fk_Variable_0 Nombre_0 Codigo_0  FK_JerarquiaPadres_0 Id_1 Fk_Variable_1 #> 1 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 2 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 3 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 4 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 5 9008            70  Galicia       12 16473, 274511, 274508   28           115 #> 6 9008            70  Galicia       12 16473, 274511, 274508   28           115 #>   Nombre_1 Codigo_1 FK_JerarquiaPadres_1 Id_2 Fk_Variable_2 Nombre_2 Codigo_2 #> 1     Lugo       27                 9008  570            19     Lugo    27028 #> 2     Lugo       27                 9008  570            19     Lugo    27028 #> 3     Lugo       27                 9008  570            19     Lugo    27028 #> 4     Lugo       27                 9008  570            19     Lugo    27028 #> 5     Lugo       27                 9008  570            19     Lugo    27028 #> 6     Lugo       27                 9008  570            19     Lugo    27028 #>   FK_JerarquiaPadres_2   Id_3 Fk_Variable_3         Nombre_3 Codigo_3 #> 1           28, 392355 344156           846 Lugo distrito 01  2702801 #> 2           28, 392355 344156           846 Lugo distrito 01  2702801 #> 3           28, 392355 344156           846 Lugo distrito 01  2702801 #> 4           28, 392355 344160           846 Lugo distrito 02  2702802 #> 5           28, 392355 344160           846 Lugo distrito 02  2702802 #> 6           28, 392355 344160           846 Lugo distrito 02  2702802 #>   FK_JerarquiaPadres_3   Id_4 Fk_Variable_4           Nombre_4   Codigo_4 #> 1                  570 344157           847 Lugo sección 01001 2702801001 #> 2                  570 344158           847 Lugo sección 01002 2702801002 #> 3                  570 344159           847 Lugo sección 01003 2702801003 #> 4                  570 344161           847 Lugo sección 02001 2702802001 #> 5                  570 344162           847 Lugo sección 02002 2702802002 #> 6                  570 344163           847 Lugo sección 02003 2702802003 #>   FK_JerarquiaPadres_4 #> 1               344156 #> 2               344156 #> 3               344156 #> 4               344160 #> 5               344160 #> 6               344160"},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data.html","id":"filtering-data-from-tables","dir":"Articles","previous_headings":"","what":"Filtering data from tables","title":"How to filter data","text":"necessary pass argument filter get_data_table() function, list() variables values take. two approaches build filter depending table type.","code":""},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data.html","id":"case-one-","dir":"Articles","previous_headings":"Filtering data from tables","what":"Case one.","title":"How to filter data","text":"URL: https://www.ine.es/jaxiT3/Tabla.htm?t=50902 first step obtain values groups (combo boxes) table interest us build filter. information build filter follows. NOTE add minus sign value, value excluded filter.","code":"library(ineapir)  # Get metadata information of the table metadata <- get_metadata_table_varval(idTable = 50902, validate = FALSE) head(metadata,4) #>       Id Fk_Variable                             Nombre Codigo #> 1 304092         762                     Índice general     00 #> 2 304093         762 Alimentos y bebidas no alcohólicas     01 #> 3 304094         762       Bebidas alcohólicas y tabaco     02 #> 4 304095         762                  Vestido y calzado     03 tail(metadata,4) #>    Id Fk_Variable                        Nombre Codigo #> 14 83           3                        Índice      0 #> 15 84           3             Variación mensual      1 #> 16 74           3               Variación anual      2 #> 17 87           3 Variación en lo que va de año      5 # The filter is a list() filter <- list(\"3\" = \"74\" ,     # variable id = 3, value id = 74                \"762\" = \"304092\" # variable id = 762, value id = 304092                )  # Request data using the filter ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 5, validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación anual.         M06 2025   2.2 #> 1.1 Total Nacional. Índice general. Variación anual.         M05 2025   2.0 #> 1.2 Total Nacional. Índice general. Variación anual.         M04 2025   2.2 #> 1.3 Total Nacional. Índice general. Variación anual.         M03 2025   2.3 #> 1.4 Total Nacional. Índice general. Variación anual.         M02 2025   3.0 # The filter is a list() filter <- list(\"3\" = \"74\" ,     # variable id = 3, value id = 74                \"762\" = \"-304092\" # variable id = 762, value id = 304092                )  # Request data using the filter ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 2, validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                                                                   Nombre #> 1                                                  Total Nacional. Alimentos y bebidas no alcohólicas. Variación anual.  #> 2                                                        Total Nacional. Bebidas alcohólicas y tabaco. Variación anual.  #> 3                                                                   Total Nacional. Vestido y calzado. Variación anual.  #> 4                              Total Nacional. Vivienda, agua, electricidad, gas y otros combustibles. Variación anual.  #> 5  Total Nacional. Muebles, artículos del hogar y artículos para el mantenimiento corriente del hogar. Variación anual.  #> 6                                                                             Total Nacional. Sanidad. Variación anual.  #> 7                                                                          Total Nacional. Transporte. Variación anual.  #> 8                                                                      Total Nacional. Comunicaciones. Variación anual.  #> 9                                                                      Total Nacional. Ocio y cultura. Variación anual.  #> 10                                                                          Total Nacional. Enseñanza. Variación anual.  #> 11                                                             Total Nacional. Restaurantes y hoteles. Variación anual.  #> 12                                                           Total Nacional. Otros bienes y servicios. Variación anual.  #>    T3_Periodo Anyo Valor #> 1         M05 2025   2.5 #> 2         M05 2025   3.6 #> 3         M05 2025   0.5 #> 4         M05 2025   3.8 #> 5         M05 2025   0.6 #> 6         M05 2025   1.9 #> 7         M05 2025  -2.0 #> 8         M05 2025   2.0 #> 9         M05 2025   0.5 #> 10        M05 2025   2.5 #> 11        M05 2025   4.3 #> 12        M05 2025   3.6"},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data.html","id":"case-two-pc-axis-file","dir":"Articles","previous_headings":"Filtering data from tables","what":"Case two (pc-axis file)","title":"How to filter data","text":"URL: https://www.ine.es/jaxi/Tabla.htm?path=/t20/e245/p08/l0/&file=01001.px first step obtain metadata information table. information build filter follows. NOTE add minus sign value, value excluded filter.","code":"# Get metadata information of the table metadata <- get_metadata_table_varval(idTable = \"t20/e245/p08/l0/01001.px\") metadata #>            Nombre        Codigo         Variable.Nombre      Variable.Codigo #> 1    TOTAL EDADES   totaledades edad (3 grupos de edad)    edad3gruposdeedad #> 2           TOTAL         total   Españoles/Extranjeros espanolesextranjeros #> 3     Ambos sexos    ambossexos                    Sexo                 sexo #> 6         Hombres       hombres                    Sexo                 sexo #> 9         Mujeres       mujeres                    Sexo                 sexo #> 11      Españoles     espanoles   Españoles/Extranjeros espanolesextranjeros #> 20    Extranjeros   extranjeros   Españoles/Extranjeros espanolesextranjeros #> 29  % Extranjeros extranjeros~1   Españoles/Extranjeros espanolesextranjeros #> 37      0-15 años       015anos edad (3 grupos de edad)    edad3gruposdeedad #> 73     16-64 años      1664anos edad (3 grupos de edad)    edad3gruposdeedad #> 109      65 y más        65ymas edad (3 grupos de edad)    edad3gruposdeedad # NOTE: for px tables we can use a filter. metadata <- get_metadata_table_varval(idTable = \"t20/e245/p08/l0/01001.px\",                                       filter = list(sexo = \"ambossexos\")) metadata #>           Nombre        Codigo         Variable.Nombre      Variable.Codigo #> 1   TOTAL EDADES   totaledades edad (3 grupos de edad)    edad3gruposdeedad #> 2          TOTAL         total   Españoles/Extranjeros espanolesextranjeros #> 3    Ambos sexos    ambossexos                    Sexo                 sexo #> 5      Españoles     espanoles   Españoles/Extranjeros espanolesextranjeros #> 8    Extranjeros   extranjeros   Españoles/Extranjeros espanolesextranjeros #> 11 % Extranjeros extranjeros~1   Españoles/Extranjeros espanolesextranjeros #> 13     0-15 años       015anos edad (3 grupos de edad)    edad3gruposdeedad #> 25    16-64 años      1664anos edad (3 grupos de edad)    edad3gruposdeedad #> 37      65 y más        65ymas edad (3 grupos de edad)    edad3gruposdeedad # Build the filter with the codes of variables and values filter <- list(sexo = \"ambossexos\",                              espanolesextranjeros = \"total\",                   edad3gruposdeedad = \"totaledades\"                 )   # Request data using the filter poblacion <- get_data_table(idTable = \"t20/e245/p08/l0/01001.px\", unnest = TRUE,                             tip = \"A\", nlast = 5, filter = filter,                             validate = FALSE) poblacion #>                             Nombre NombrePeriodo    Valor #> 1 TOTAL EDADES, TOTAL, Ambos sexos          2022 47475420 #> 2 TOTAL EDADES, TOTAL, Ambos sexos          2021 47385107 #> 3 TOTAL EDADES, TOTAL, Ambos sexos          2020 47450795 #> 4 TOTAL EDADES, TOTAL, Ambos sexos          2019 47026208 #> 5 TOTAL EDADES, TOTAL, Ambos sexos          2018 46722980 # Build the filter with the codes of variables and values filter <- list(sexo = \"-ambossexos\",                              espanolesextranjeros = \"total\",                   edad3gruposdeedad = \"totaledades\"                 )   # Request data using the filter poblacion <- get_data_table(idTable = \"t20/e245/p08/l0/01001.px\", unnest = TRUE,                             tip = \"A\", nlast = 1, filter = filter,                             validate = FALSE) poblacion #>                         Nombre NombrePeriodo    Valor #> 1 TOTAL EDADES, TOTAL, Hombres          2022 23265381 #> 2 TOTAL EDADES, TOTAL, Mujeres          2022 24210039"},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data.html","id":"case-three-tpx-file","dir":"Articles","previous_headings":"Filtering data from tables","what":"Case three (tpx file)","title":"How to filter data","text":"URL: https://www.ine.es/jaxi/Tabla.htm?tpx=33387&L=0 first step obtain metadata information table. information build filter follows. NOTE add minus sign value, value excluded filter. URL: https://www.ine.es/jaxi/Tabla.htm?tpx=52056&L=0 tpx tables contain variable ids value ids. can see obtain metadata information table. case, can use ids instead codes build filter. add alias ~id end id.","code":"# Get metadata information of the table metadata <- get_metadata_table_varval(idTable = 33387) #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). metadata[grepl(\"^\\\\d{1}\\\\D+\",metadata$Codigo),] #>                                         Nombre #> 2                                  1.  Biomasa #> 29  2.  Minerales metálicos (mineral en bruto) #> 50                  3.  Minerales no metálicos #> 106                   4.  Combustibles fósiles #>                                Codigo  Variable.Nombre Variable.Codigo #> 2                            1biomasa tipo de material  tipodematerial #> 29  2mineralesmetalicosmineralenbruto tipo de material  tipodematerial #> 50              3mineralesnometalicos tipo de material  tipodematerial #> 106              4combustiblesfosiles tipo de material  tipodematerial # NOTE: for tpx tables we can use a filter. metadata <- get_metadata_table_varval(idTable = 33387,                                       filter = list(tipodematerial = \"1biomasa\")) #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). metadata[grepl(\"^\\\\d{1}\\\\D+\",metadata$Codigo),] #>        Nombre   Codigo  Variable.Nombre Variable.Codigo #> 1 1.  Biomasa 1biomasa tipo de material  tipodematerial # Build the filter with the codes of variables and values # A variable can take more than one value filter <- list(tipodematerial = c(\"1biomasa\", \"2mineralesmetalicosmineralenbruto\",                                   \"3mineralesnometalicos\", \"4combustiblesfosiles\")                )   # Request data using the filter materiales <- get_data_table(idTable = 33387, unnest = TRUE, tip = \"A\",                              nlast = 1, filter = filter, validate = FALSE) #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). materiales #>                                       Nombre NombrePeriodo     Valor #> 1                                1.  Biomasa 2023 (avance) 107483869 #> 2 2.  Minerales metálicos (mineral en bruto) 2023 (avance)  23233159 #> 3                 3.  Minerales no metálicos 2023 (avance) 213294377 #> 4                   4.  Combustibles fósiles 2023 (avance)    110206 # Build the filter with the codes of variables and values # A variable can take more than one value filter <- list(tipodematerial = c(\"-1biomasa\", \"-2mineralesmetalicosmineralenbruto\",                                   \"-3mineralesnometalicos\", \"-4combustiblesfosiles\")                )   # Request data using the filter materiales <- get_data_table(idTable = 33387, unnest = TRUE, tip = \"A\",                              nlast = 1, filter = filter, validate = FALSE) #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). head(materiales) #>                        Nombre NombrePeriodo     Valor #> 1         EXTRACCION NACIONAL 2023 (avance) 344121611 #> 2    1.1.  Cultivos primarios 2023 (avance)  52902520 #> 3            1.1.1.  Cereales 2023 (avance)        NA #> 4 1.1.2.  Raices y tubérculos 2023 (avance)        NA #> 5 1.1.3.  Cultivos azucareros 2023 (avance)        NA #> 6         1.1.4.  Leguminosas 2023 (avance)        NA # Get metadata information of the table using a filter. # The filter is useful when the table contains a large number of series # (for example, tables with a large territorial segmentation) which slows down # the information retrieval. metadata <- get_metadata_table_varval(idTable = 52056,                                       filter = list(NAC = \"00\")) #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). head(metadata[order(metadata$Variable.Id),],4) #>       Id         Nombre Codigo Variable.Id Variable.Nombre Variable.Codigo #> 6  11406 Valor absoluto                  3    Tipo de dato                 #> 12    77     Porcentaje                  3    Tipo de dato                 #> 4    451          Total                 18            Sexo                 #> 40   452        Hombres      1          18            Sexo # In order to use the ids of variables and values we add the alias '~id' filter = list(\"349~id\" = \"16473~id\",  # variable id = 349, value id = 16473               \"916~id\" = \"391871~id\", # variable id = 909, value id = 391455               \"942~id\" = \"274282~id\", # variable id = 942, value id = 274282               \"999~id\" = \"391770~id\", # variable id = 975, value id = 391438               \"3~id\"   = \"11406~id\"  # variable id = 3, value id = 11406               )  # Request data using the filter explotaciones <- get_data_table(idTable = 52056, unnest = TRUE, tip = \"A\",                              nlast = 1, filter = filter, validate = FALSE) #> No encoding supplied: defaulting to UTF-8. #> A error occurred calling the API (status 404). explotaciones #>                                                                                          Nombre #> 1   Total Nacional, Total tramos UTAT, Total mano de obra, Total, Explotaciones, Valor absoluto #> 2 Total Nacional, Total tramos UTAT, Total mano de obra, Hombres, Explotaciones, Valor absoluto #> 3 Total Nacional, Total tramos UTAT, Total mano de obra, Mujeres, Explotaciones, Valor absoluto #>    Valor #> 1 894718 #> 2 757886 #> 3 356571"},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data.html","id":"filtering-data-from-series","dir":"Articles","previous_headings":"","what":"Filtering data from series","title":"How to filter data","text":"necessary pass argument filter get_data_series_filter() function, list() variables values take. first step obtain variables used operation series belong. second step obtain values variables interest us build filter. information build filter follows. variable can take one value (valid filter data tables well). variable can take empty character \"\" get possible values (valid filter data tables well).","code":"# Variables used in the operation IPC variables <- get_metadata_variables(operation = \"IPC\", validate = FALSE) variables #>     Id                           Nombre Codigo #> 1    3                     Tipo de dato        #> 2   70 Comunidades y Ciudades Autónomas   CCAA #> 3  115                       Provincias   PROV #> 4  269           Grupos especiales 2001        #> 5  270                    Rúbricas 2001        #> 6  349            Totales Territoriales    NAC #> 7  544            Corrección de efectos        #> 8  762                   Grupos ECOICOP        #> 9  763                Subgrupos ECOICOP        #> 10 764                   Clases ECOICOP        #> 11 765                Subclases ECOICOP # Values of the variable with id = 115 provincias <- get_metadata_values(operation = \"IPC\", variable = 115, validate = FALSE) head(provincias) #>   Id Fk_Variable           Nombre Codigo FK_JerarquiaPadres #> 1  2         115      Araba/Álava     01               9012 #> 2  3         115         Albacete     02               9004 #> 3  4         115 Alicante/Alacant     03               9006 #> 4  5         115          Almería     04               8997 #> 5  6         115            Ávila     05               9003 #> 6  7         115          Badajoz     06               9007  # Values of the variable with id = 3 tipo <- get_metadata_values(operation = \"IPC\", variable = 3, validate = FALSE) head(tipo) #>   Id Fk_Variable            Nombre Codigo #> 1 72           3         Dato base        #> 2 74           3   Variación anual        #> 3 83           3            Índice        #> 4 84           3 Variación mensual        #> 5 85           3       Media anual      M #> 6 86           3   Variación anual  # Values of the variable with id = 762 grupos <- get_metadata_values(operation = \"IPC\", variable = 762, validate = FALSE) head(grupos, 4) #>       Id Fk_Variable                             Nombre Codigo #> 1 304092         762                     Índice general     00 #> 2 304093         762 Alimentos y bebidas no alcohólicas     01 #> 3 304094         762       Bebidas alcohólicas y tabaco     02 #> 4 304095         762                  Vestido y calzado     03 #>   FK_JerarquiaPadres #> 1               NULL #> 2             304092 #> 3             304092 #> 4             304092  # We can get all the values at once with the function get_metadata_series_varval varval <- get_metadata_series_varval(operation = \"IPC\", validate = FALSE) head(subset(varval, Fk_Variable == 115)) #>    Id Fk_Variable           Nombre Codigo #> 33  2         115      Araba/Álava     01 #> 34  3         115         Albacete     02 #> 35  4         115 Alicante/Alacant     03 #> 36  5         115          Almería     04 #> 37  6         115            Ávila     05 #> 38  7         115          Badajoz     06 head(subset(varval, Fk_Variable == 3)) #>   Id Fk_Variable            Nombre Codigo #> 1 72           3         Dato base        #> 2 74           3   Variación anual        #> 3 83           3            Índice        #> 4 84           3 Variación mensual        #> 5 85           3       Media anual      M #> 6 86           3   Variación anual head(subset(varval, Fk_Variable == 762), 4) #>         Id Fk_Variable                             Nombre Codigo #> 176 304092         762                     Índice general     00 #> 177 304093         762 Alimentos y bebidas no alcohólicas     01 #> 178 304094         762       Bebidas alcohólicas y tabaco     02 #> 179 304095         762                  Vestido y calzado     03 # The filter is a list() filter <- list(\"115\" = \"2\",     # variable id = 115, value id = 2                \"3\" = \"74\" ,     # variable id = 3, value id = 74                \"762\" = \"304092\" # variable id = 762, value id = 304092                )  # Request data using the filter ipc <- get_data_series_filter(operation = \"IPC\", filter = filter, periodicity = 1,                               unnest = TRUE, tip = \"A\", validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                           Nombre T3_Periodo Anyo Valor #> 1 Araba/Álava. Índice general. Variación anual.        may. 2025   2.4 # The filter is a list() filter <- list(\"115\" = c(\"2\" ,\"3\", \"4\"), # variable id = 115, values id 2, 3, 4                \"3\" = \"74\" ,              # variable id = 3, value id = 74                \"762\" = \"304092\"          # variable id = 762, value id = 304092                )  # Request data using the filter ipc <- get_data_series_filter(operation = \"IPC\", filter = filter, periodicity = 1,                                unnest = TRUE, tip = \"A\", validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1 Alicante/Alacant. Índice general. Variación anual.        may. 2025   1.9 #> 2         Albacete. Índice general. Variación anual.        may. 2025   1.7 #> 3      Araba/Álava. Índice general. Variación anual.        may. 2025   2.4 # The filter is a list() filter <- list(\"115\" = \"\",      # variable id = 115, all values                \"3\" = \"83\" ,     # variable id = 3, value id = 83                \"762\" = \"304092\" # variable id = 762, value id = 304092                )  # Request data using the filter ipc <- get_data_series_filter(operation = \"IPC\", filter = filter, periodicity = 1,                                unnest = TRUE, tip = \"A\", validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                              Nombre T3_Periodo Anyo   Valor #> 1               Salamanca. Índice general. Índice.        may. 2025 119.414 #> 2                  Huelva. Índice general. Índice.        may. 2025 119.544 #> 3             Ciudad Real. Índice general. Índice.        may. 2025 119.467 #> 4        Alicante/Alacant. Índice general. Índice.        may. 2025 118.560 #> 5                 Ourense. Índice general. Índice.        may. 2025 119.219 #> 6  Santa Cruz de Tenerife. Índice general. Índice.        may. 2025 117.789 #> 7               Coruña, A. Índice general. Índice.        may. 2025 118.090 #> 8              Valladolid. Índice general. Índice.        may. 2025 118.442 #> 9                  Huesca. Índice general. Índice.        may. 2025 119.189 #> 10                  Cádiz. Índice general. Índice.        may. 2025 119.059 #> 11                 Málaga. Índice general. Índice.        may. 2025 120.251 #> 12                 Teruel. Índice general. Índice.        may. 2025 117.968 #> 13               Albacete. Índice general. Índice.        may. 2025 119.433 #> 14              Rioja, La. Índice general. Índice.        may. 2025 118.309 #> 15             Pontevedra. Índice general. Índice.        may. 2025 119.280 #> 16                Melilla. Índice general. Índice.        may. 2025 119.242 #> 17                 Cuenca. Índice general. Índice.        may. 2025 118.788 #> 18                 Toledo. Índice general. Índice.        may. 2025 120.328 #> 19                Córdoba. Índice general. Índice.        may. 2025 119.032 #> 20                  Ceuta. Índice general. Índice.        may. 2025 118.805 #> 21                Granada. Índice general. Índice.        may. 2025 118.560 #> 22                  Ávila. Índice general. Índice.        may. 2025 119.612 #> 23              Tarragona. Índice general. Índice.        may. 2025 117.533 #> 24                  Soria. Índice general. Índice.        may. 2025 117.921 #> 25      Valencia/València. Índice general. Índice.        may. 2025 117.851 #> 26            Guadalajara. Índice general. Índice.        may. 2025 119.517 #> 27                 Burgos. Índice general. Índice.        may. 2025 117.926 #> 28                   Lugo. Índice general. Índice.        may. 2025 119.251 #> 29               Gipuzkoa. Índice general. Índice.        may. 2025 118.530 #> 30                Almería. Índice general. Índice.        may. 2025 117.253 #> 31                 Girona. Índice general. Índice.        may. 2025 118.051 #> 32                 Lleida. Índice general. Índice.        may. 2025 119.487 #> 33               Zaragoza. Índice general. Índice.        may. 2025 118.007 #> 34                 Zamora. Índice general. Índice.        may. 2025 119.617 #> 35     Castellón/Castelló. Índice general. Índice.        may. 2025 120.195 #> 36                   Jaén. Índice general. Índice.        may. 2025 118.972 #> 37               Asturias. Índice general. Índice.        may. 2025 117.974 #> 38            Araba/Álava. Índice general. Índice.        may. 2025 117.634 #> 39                Badajoz. Índice general. Índice.        may. 2025 119.749 #> 40                 Madrid. Índice general. Índice.        may. 2025 116.476 #> 41                Bizkaia. Índice general. Índice.        may. 2025 119.011 #> 42              Cantabria. Índice general. Índice.        may. 2025 117.559 #> 43            Palmas, Las. Índice general. Índice.        may. 2025 117.577 #> 44                Segovia. Índice general. Índice.        may. 2025 118.631 #> 45               Palencia. Índice general. Índice.        may. 2025 118.108 #> 46                Sevilla. Índice general. Índice.        may. 2025 118.556 #> 47                   León. Índice general. Índice.        may. 2025 120.353 #> 48         Balears, Illes. Índice general. Índice.        may. 2025 118.830 #> 49              Barcelona. Índice general. Índice.        may. 2025 117.027 #> 50                Navarra. Índice general. Índice.        may. 2025 118.360 #> 51                Cáceres. Índice general. Índice.        may. 2025 117.332 #> 52                 Murcia. Índice general. Índice.        may. 2025 118.147"},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data_shortcuts.html","id":"filtering-data-from-tables","dir":"Articles","previous_headings":"","what":"Filtering data from tables","title":"How to filter data using shortcut names","text":"use filter shortcuts necessary pass argument filter using shortcut variable name value.","code":""},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-one","dir":"Articles","previous_headings":"Filtering data from tables","what":"Example one","title":"How to filter data using shortcut names","text":"going filter table Índices nacionales: general y de grupos ECOICOP (Id 50902): Besides, can also use values wrapper. add minus sign value, value excluded filter.","code":"library(ineapir)  # Filter using shortcuts (CPI) filter <- list(tipodato = \"variación anual\" , # variable id = 3                grupo = \"índice general\"       # variable id = 762                )  # Request data using the filter ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 5, validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación anual.         M06 2025   2.2 #> 1.1 Total Nacional. Índice general. Variación anual.         M05 2025   2.0 #> 1.2 Total Nacional. Índice general. Variación anual.         M04 2025   2.2 #> 1.3 Total Nacional. Índice general. Variación anual.         M03 2025   2.3 #> 1.4 Total Nacional. Índice general. Variación anual.         M02 2025   3.0 # Filter with the values wrapper filter <- list(values = c(\"variación anual\" , \"índice general\"))  # Request data using the filter ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 5, validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación anual.         M06 2025   2.2 #> 1.1 Total Nacional. Índice general. Variación anual.         M05 2025   2.0 #> 1.2 Total Nacional. Índice general. Variación anual.         M04 2025   2.2 #> 1.3 Total Nacional. Índice general. Variación anual.         M03 2025   2.3 #> 1.4 Total Nacional. Índice general. Variación anual.         M02 2025   3.0 # Filter with the values wrapper filter <- list(values = c(\"variación anual\" , \"-índice general\"))  # Request data using the filter ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 2, validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                                                                   Nombre #> 1                                                  Total Nacional. Alimentos y bebidas no alcohólicas. Variación anual.  #> 2                                                        Total Nacional. Bebidas alcohólicas y tabaco. Variación anual.  #> 3                                                                   Total Nacional. Vestido y calzado. Variación anual.  #> 4                              Total Nacional. Vivienda, agua, electricidad, gas y otros combustibles. Variación anual.  #> 5  Total Nacional. Muebles, artículos del hogar y artículos para el mantenimiento corriente del hogar. Variación anual.  #> 6                                                                             Total Nacional. Sanidad. Variación anual.  #> 7                                                                          Total Nacional. Transporte. Variación anual.  #> 8                                                                      Total Nacional. Comunicaciones. Variación anual.  #> 9                                                                      Total Nacional. Ocio y cultura. Variación anual.  #> 10                                                                          Total Nacional. Enseñanza. Variación anual.  #> 11                                                             Total Nacional. Restaurantes y hoteles. Variación anual.  #> 12                                                           Total Nacional. Otros bienes y servicios. Variación anual.  #>    T3_Periodo Anyo Valor #> 1         M05 2025   2.5 #> 2         M05 2025   3.6 #> 3         M05 2025   0.5 #> 4         M05 2025   3.8 #> 5         M05 2025   0.6 #> 6         M05 2025   1.9 #> 7         M05 2025  -2.0 #> 8         M05 2025   2.0 #> 9         M05 2025   0.5 #> 10        M05 2025   2.5 #> 11        M05 2025   4.3 #> 12        M05 2025   3.6"},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-two","dir":"Articles","previous_headings":"Filtering data from tables","what":"Example two","title":"How to filter data using shortcut names","text":"going filter table PIB pm Oferta (Indices de volumen encadenado) (Id 30679):","code":"# Filter with the values wrapper (GDP) filter <- list(values = c(\"producto interior\", \"datos ajustados\", \"variación anual\"))  # Request data using the filter and shortcut = TRUE pib <- get_data_table(idTable = 30679, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 5, validate = FALSE) head(pib[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")]) #>                                                                                                                                                              Nombre #> 1   Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #> 1.1 Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #> 1.2 Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #> 1.3 Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #> 1.4 Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #>     T3_Periodo Anyo  Valor #> 1           T2 2024 2.8873 #> 1.1         T1 2024 2.5806 #> 1.2         T4 2023 2.1685 #> 1.3         T3 2023 1.9417 #> 1.4         T2 2023 1.9659"},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-three","dir":"Articles","previous_headings":"Filtering data from tables","what":"Example three","title":"How to filter data using shortcut names","text":"going filter table Población residente por fecha, sexo y edad (desde 1971) (Id 56934)","code":"# Filter with the values wrapper (population) filter <- list(values = c(\"todas las edades\", \"total\"))  # Request data using the filter pob <- get_data_table(idTable = 56934, filter = filter, unnest = TRUE,                        tip = \"A\", nlast = 5, validate = FALSE) pob[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                           Nombre #> 1   Total Nacional. Todas las edades. Total. Población. Número.  #> 1.1 Total Nacional. Todas las edades. Total. Población. Número.  #> 1.2 Total Nacional. Todas las edades. Total. Población. Número.  #> 1.3 Total Nacional. Todas las edades. Total. Población. Número.  #> 1.4 Total Nacional. Todas las edades. Total. Población. Número.  #>          T3_Periodo Anyo    Valor #> 1     1 de enero de 2024 48619695 #> 1.1 1 de octubre de 2023 48486865 #> 1.2   1 de julio de 2023 48320520 #> 1.3   1 de abril de 2023 48205962 #> 1.4   1 de enero de 2023 48085361"},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data_shortcuts.html","id":"filtering-data-from-series","dir":"Articles","previous_headings":"","what":"Filtering data from series","title":"How to filter data using shortcut names","text":"necessary pass argument filter get_data_series_filter() function. use shortcut variable name value.","code":""},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-one-1","dir":"Articles","previous_headings":"Filtering data from series","what":"Example one","title":"How to filter data using shortcut names","text":"","code":"# Filter with the values wrapper (CPI) filter <- list(values = c(\"variación anual\" , \"índice general\", \"total nacional\"))  # Request data using the filter ipc <- get_data_series_filter(operation = \"IPC\", filter = filter,                               periodicity = 1, unnest = TRUE, tip = \"A\",                               validate = FALSE) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                    Nombre #> 1                       Total Nacional. Índice general. Variación anual.  #> 2 Total Nacional. Índice general. Variación anual. Impuestos constantes.  #>   T3_Periodo Anyo Valor #> 1       jun. 2025   2.2 #> 2        M05 2025   1.8"},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-two-1","dir":"Articles","previous_headings":"Filtering data from series","what":"Example two","title":"How to filter data using shortcut names","text":"","code":"# Filter with the values wrapper (GDP) filter <- list(values = c(\"producto interior\", \"datos ajustados\",                        \"volumen encadenado\", \"variación anual\"))  # Request data using the filter pib <- get_data_series_filter(operation = \"CNTR2010\", filter = filter,                               periodicity = 3, unnest = TRUE, tip = \"A\",                               validate = FALSE) pib[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                                                                                                                       Nombre #> 1            Total Nacional. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #> 2 Total Nacional. Base 2010. Datos ajustados de estacionalidad y calendario. Producto interior bruto a precios de mercado. Variación anual. Índices de volumen encadenados.  #>   T3_Periodo Anyo  Valor #> 1         T1 2025 2.7814 #> 2         T2 2019 2.2513"},{"path":"https://inedifusion.github.io/ineapir/articles/filter_data_shortcuts.html","id":"example-three-1","dir":"Articles","previous_headings":"Filtering data from series","what":"Example three","title":"How to filter data using shortcut names","text":"","code":"# Filter with the values wrapper combine with individual shortcuts (population) filter <- list(values = c(\"todas las edades\", \"total nacional\"), nacionalidad = \"total\",                sexo = \"total\", paisnacimiento = \"total\" )  # Request data using the filter pob <- get_data_series_filter(operation = \"ECP\", filter = filter,                               periodicity = 3, unnest = TRUE, tip = \"A\",                               validate = FALSE) pob[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                       Nombre #> 1 Total Nacional. Total. Todas las edades. Total. Total. Población. Número.  #> 2 Total Nacional. Total. Todas las edades. Total. Total. Población. Número.  #>   T3_Periodo Anyo    Valor #> 1         T1 2024 48619695 #> 2         T1 2024 48619695"},{"path":"https://inedifusion.github.io/ineapir/articles/identify_codes.html","id":"obtaining-the-identification-code-of-a-table","dir":"Articles","previous_headings":"","what":"Obtaining the identification code of a table","title":"How to identify the codes of tables and series on the INE website","text":"browsing table, three possible cases comes identifying ID. REMARK: id table unique immutable, matter variables/values selected table.","code":""},{"path":"https://inedifusion.github.io/ineapir/articles/identify_codes.html","id":"case-one","dir":"Articles","previous_headings":"Obtaining the identification code of a table","what":"Case one","title":"How to identify the codes of tables and series on the INE website","text":"URL: https://www.ine.es/jaxiT3/Tabla.htm?t=50902 ID: URL t parameter 50902","code":"library(ineapir) # Request table data with id = 50902 table <- get_data_table(idTable = 50902, nlast = 1, unnest = TRUE) table[1:2,c(\"Nombre\", \"FK_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre FK_Periodo Anyo Valor #> 2 Total Nacional. Índice general. Variación mensual.           6 2025   0.6 #> 3   Total Nacional. Índice general. Variación anual.           6 2025   2.2"},{"path":"https://inedifusion.github.io/ineapir/articles/identify_codes.html","id":"case-two-pc-axis-file","dir":"Articles","previous_headings":"Obtaining the identification code of a table","what":"Case two (pc-axis file)","title":"How to identify the codes of tables and series on the INE website","text":"URL: https://www.ine.es/jaxi/Tabla.htm?path=/t20/e245/p08/l0/&file=01001.px ID: concatenate URL parameters path file one single ID t20/e245/p08/l0/01001.px","code":"# Request table data with id = t20/e245/p08/l0/01001.px table <- get_data_table(idTable = \"t20/e245/p08/l0/01001.px\", nlast = 1, unnest = TRUE) head(table, 3) #>                             Nombre NombrePeriodo    Valor Secreto #> 1 TOTAL EDADES, TOTAL, Ambos sexos          2022 47475420   FALSE #> 2     TOTAL EDADES, TOTAL, Hombres          2022 23265381   FALSE #> 3     TOTAL EDADES, TOTAL, Mujeres          2022 24210039   FALSE"},{"path":"https://inedifusion.github.io/ineapir/articles/identify_codes.html","id":"case-three-tpx-file","dir":"Articles","previous_headings":"Obtaining the identification code of a table","what":"Case three (tpx file)","title":"How to identify the codes of tables and series on the INE website","text":"URL: https://www.ine.es/jaxi/Tabla.htm?tpx=33387&L=0 ID: URL tpx parameter 33387","code":"# Request table data with id = 33387 table <- get_data_table(idTable = 33387, nlast = 1, unnest = TRUE) head(table, 3) #>                     Nombre NombrePeriodo     Valor Secreto #> 1      EXTRACCION NACIONAL 2023 (avance) 344121611   FALSE #> 2              1.  Biomasa 2023 (avance) 107483869   FALSE #> 3 1.1.  Cultivos primarios 2023 (avance)  52902520   FALSE"},{"path":"https://inedifusion.github.io/ineapir/articles/identify_codes.html","id":"obtaining-the-identification-code-of-a-series","dir":"Articles","previous_headings":"","what":"Obtaining the identification code of a series","title":"How to identify the codes of tables and series on the INE website","text":"tables introduced cases two three include temporal series. tables case one contain temporal series. order obtain identification code series necessary carry number steps. Browse table containing series interest. Make selection values table perform query. Click corresponding value cell. pop-window shows, among information, identification code series associated cell clicked .","code":"# Request series data with code = IPC251856 serie <- get_data_series(codSeries = \"IPC251856\", unnest = TRUE) serie[1,c(\"Nombre\", \"FK_Periodo\", \"Anyo\", \"Valor\")] #>                                              Nombre FK_Periodo Anyo Valor #> 1 Total Nacional. Índice general. Variación anual.           6 2025   2.2"},{"path":"https://inedifusion.github.io/ineapir/articles/tips.html","id":"use-of-datestart-and-dateend","dir":"Articles","previous_headings":"","what":"Use of dateStart and dateEnd","title":"Tips","text":"arguments dateStart dateEnd available get_data_table(), get_data_series() get_data_series_filter(), allow filter data date. Single date: Single range dates: Open range dates: Multiple dates: Multiple range dates: Multiple range dates final open range:","code":"library(ineapir) filter <- list(\"3\" = \"74\" ,     # variable id = 3, value id = 74                \"762\" = \"304092\" # variable id = 762, value id = 304092                )  # Request data using dates. The required format is yyyy/mm/dd. ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", validate = FALSE,                       dateStart = \"2025/01/01\", dateEnd = \"2025/01/01\") ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                              Nombre T3_Periodo Anyo Valor #> 1 Total Nacional. Índice general. Variación anual.         M01 2025   2.9 # Request data using dates. The required format is yyyy/mm/dd. ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", validate = FALSE,                       dateStart = \"2024/01/01\", dateEnd = \"2024/12/01\") ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                 Nombre T3_Periodo Anyo Valor #> 1    Total Nacional. Índice general. Variación anual.         M12 2024   2.8 #> 1.1  Total Nacional. Índice general. Variación anual.         M11 2024   2.4 #> 1.2  Total Nacional. Índice general. Variación anual.         M10 2024   1.8 #> 1.3  Total Nacional. Índice general. Variación anual.         M09 2024   1.5 #> 1.4  Total Nacional. Índice general. Variación anual.         M08 2024   2.3 #> 1.5  Total Nacional. Índice general. Variación anual.         M07 2024   2.8 #> 1.6  Total Nacional. Índice general. Variación anual.         M06 2024   3.4 #> 1.7  Total Nacional. Índice general. Variación anual.         M05 2024   3.6 #> 1.8  Total Nacional. Índice general. Variación anual.         M04 2024   3.3 #> 1.9  Total Nacional. Índice general. Variación anual.         M03 2024   3.2 #> 1.10 Total Nacional. Índice general. Variación anual.         M02 2024   2.8 #> 1.11 Total Nacional. Índice general. Variación anual.         M01 2024   3.4 # Request data using dates. The required format is yyyy/mm/dd. ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", validate = FALSE,                       dateStart = \"2025/01/01\") ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación anual.         M06 2025   2.2 #> 1.1 Total Nacional. Índice general. Variación anual.         M05 2025   2.0 #> 1.2 Total Nacional. Índice general. Variación anual.         M04 2025   2.2 #> 1.3 Total Nacional. Índice general. Variación anual.         M03 2025   2.3 #> 1.4 Total Nacional. Índice general. Variación anual.         M02 2025   3.0 #> 1.5 Total Nacional. Índice general. Variación anual.         M01 2025   2.9 # Request data using dates. The required format is yyyy/mm/dd. ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", validate = FALSE,                       dateStart = c(\"2023/01/01\", \"2024/01/01\", \"2025/01/01\"),                        dateEnd = c(\"2023/01/01\", \"2024/01/01\", \"2025/01/01\")) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación anual.         M01 2025   2.9 #> 1.1 Total Nacional. Índice general. Variación anual.         M01 2024   3.4 #> 1.2 Total Nacional. Índice general. Variación anual.         M01 2023   5.9 # Request data using dates. The required format is yyyy/mm/dd. ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", validate = FALSE,                       dateStart = c(\"2023/01/01\", \"2024/01/01\", \"2025/01/01\"),                       dateEnd = c(\"2023/03/01\", \"2024/03/01\", \"2025/03/01\")) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación anual.         M03 2025   2.3 #> 1.1 Total Nacional. Índice general. Variación anual.         M02 2025   3.0 #> 1.2 Total Nacional. Índice general. Variación anual.         M01 2025   2.9 #> 1.3 Total Nacional. Índice general. Variación anual.         M03 2024   3.2 #> 1.4 Total Nacional. Índice general. Variación anual.         M02 2024   2.8 #> 1.5 Total Nacional. Índice general. Variación anual.         M01 2024   3.4 #> 1.6 Total Nacional. Índice general. Variación anual.         M03 2023   3.3 #> 1.7 Total Nacional. Índice general. Variación anual.         M02 2023   6.0 #> 1.8 Total Nacional. Índice general. Variación anual.         M01 2023   5.9 # Request data using dates. The required format is yyyy/mm/dd. ipc <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", validate = FALSE,                       dateStart = c(\"2023/01/01\", \"2024/01/01\", \"2025/01/01\"),                        dateEnd = c(\"2023/03/01\", \"2024/03/01\")) ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                 Nombre T3_Periodo Anyo Valor #> 1    Total Nacional. Índice general. Variación anual.         M06 2025   2.2 #> 1.1  Total Nacional. Índice general. Variación anual.         M05 2025   2.0 #> 1.2  Total Nacional. Índice general. Variación anual.         M04 2025   2.2 #> 1.3  Total Nacional. Índice general. Variación anual.         M03 2025   2.3 #> 1.4  Total Nacional. Índice general. Variación anual.         M02 2025   3.0 #> 1.5  Total Nacional. Índice general. Variación anual.         M01 2025   2.9 #> 1.6  Total Nacional. Índice general. Variación anual.         M03 2024   3.2 #> 1.7  Total Nacional. Índice general. Variación anual.         M02 2024   2.8 #> 1.8  Total Nacional. Índice general. Variación anual.         M01 2024   3.4 #> 1.9  Total Nacional. Índice general. Variación anual.         M03 2023   3.3 #> 1.10 Total Nacional. Índice general. Variación anual.         M02 2023   6.0 #> 1.11 Total Nacional. Índice general. Variación anual.         M01 2023   5.9"},{"path":"https://inedifusion.github.io/ineapir/articles/tips.html","id":"use-of-verbose","dir":"Articles","previous_headings":"","what":"Use of verbose","title":"Tips","text":"argument verbose = TRUE passed function, number information displayed console, including URL used call API.","code":"# Variables used in the operation IPC and verbose = TRUE variables <- get_metadata_variables(operation = \"IPC\", verbose = TRUE) #> - Check lang: OK #> - API URL: https://servicios.ine.es/wstempus/js/ES/OPERACIONES_DISPONIBLES?page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/OPERACIONES_DISPONIBLES?page=2&ver=3 #> - Check operation: OK #> - Check det: OK #> - Check page: OK #> - API URL: https://servicios.ine.es/wstempus/js/ES/VARIABLES_OPERACION/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VARIABLES_OPERACION/IPC?det=0&page=2&ver=3"},{"path":"https://inedifusion.github.io/ineapir/articles/tips.html","id":"use-of-validate","dir":"Articles","previous_headings":"","what":"Use of validate","title":"Tips","text":"necessary validate values arguments passed function, validation can turned validate = FALSE. useful filtering data filter using one want. Turning validation means making fewer API calls. better performance, recommended use codes filter instead shortcuts disable validation sure filter correct.","code":"# Variables used in the operation IPC with verbose = TRUE and validate = FALSE variables <- get_metadata_variables(operation = \"IPC\", verbose = TRUE,                                     validate = FALSE) #> - API URL: https://servicios.ine.es/wstempus/js/ES/VARIABLES_OPERACION/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VARIABLES_OPERACION/IPC?det=0&page=2&ver=3 # The filter  filter <- list(\"115\" = \"2\",     # variable id = 115, value id = 2                \"3\" = \"74\" ,     # variable id = 3, value id = 74                \"762\" = \"304092\" # variable id = 762, value id = 304092                )  # Request data using the filter with verbose = TRUE and validate = TRUE ipc <- get_data_series_filter(operation = \"IPC\", filter = filter, periodicity = 1,                        verbose = TRUE) #> - Check lang: OK #> - API URL: https://servicios.ine.es/wstempus/js/ES/OPERACIONES_DISPONIBLES?page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/OPERACIONES_DISPONIBLES?page=2&ver=3 #> - Check operation: OK #> - API URL: https://servicios.ine.es/wstempus/js/ES/VARIABLES_OPERACION/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VARIABLES_OPERACION/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/3/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/3/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/70/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/70/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/115/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/115/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/269/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/269/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/270/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/270/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/349/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/349/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/544/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/544/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/762/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/762/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/763/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/763/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/764/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/764/IPC?det=0&page=2&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/765/IPC?det=0&page=1&ver=3 #> - API URL: https://servicios.ine.es/wstempus/js/ES/VALORES_VARIABLEOPERACION/765/IPC?det=0&page=2&ver=3 #> - Check filter: OK #> - API URL: https://servicios.ine.es/wstempus/js/ES/PERIODICIDAD_OPERACION/IPC?ver=3 #> - Check periodicity: OK #> - Check nlast: OK #> - Check det: OK #> - Check page: OK #> - Processing filter: 0% - Processing filter: 67%        - Processing filter: 83%        - Processing filter: 100%        - Processing filter: 100%          #> - API URL: https://servicios.ine.es/wstempus/js/ES/DATOS_METADATAOPERACION/IPC?p=1&nult=1&det=0&page=1&ver=3&g1=115%3A2&g2=3%3A74&g3=762%3A304092  # Request data using the filter with verbose = TRUE and validate = FALSE ipc <- get_data_series_filter(operation = \"IPC\", filter = filter, periodicity = 1,                        verbose = TRUE, validate = FALSE) #> - Processing filter: 0% - Processing filter: 67%        - Processing filter: 83%        - Processing filter: 100%        - Processing filter: 100%          #> - API URL: https://servicios.ine.es/wstempus/js/ES/DATOS_METADATAOPERACION/IPC?p=1&nult=1&det=0&page=1&ver=3&g1=115%3A2&g2=3%3A74&g3=762%3A304092"},{"path":"https://inedifusion.github.io/ineapir/articles/tips.html","id":"use-of-lang","dir":"Articles","previous_headings":"","what":"Use of lang","title":"Tips","text":"possible retrieve information English passing argument lang = \"EN\" certain functions. can use English language well filtering data using shortcuts.","code":"# Variables used in the operation IPC and lang = \"EN\" variables <- get_metadata_variables(operation = \"IPC\", lang = \"EN\") variables #>     Id                            Nombre Codigo #> 1    3                      Type of data        #> 2   70 Autonomous Communities and Cities   CCAA #> 3  115                         Provinces   PROV #> 4  269               Special groups 2001        #> 5  270                     Headings 2001        #> 6  349                   Regional totals    NAC #> 7  544            Correction of effects         #> 8  762                    ECOICOP Groups        #> 9  763                ECOICOP sub-groups        #> 10 764                   ECOICOP classes        #> 11 765                ECOICOP subclasses # Filter with the values wrapper (CPI) filter <- list(values = c(\"annual change\" , \"overall index\"))  # Request data using the filter with shortcut = TRUE and lang = \"EN\" cpi <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                       tip = \"A\", nlast = 5, lang = \"EN\")  cpi[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                                     Nombre #> 1   National Total. Overall index. Annual variation (for monthly series).  #> 1.1 National Total. Overall index. Annual variation (for monthly series).  #> 1.2 National Total. Overall index. Annual variation (for monthly series).  #> 1.3 National Total. Overall index. Annual variation (for monthly series).  #> 1.4 National Total. Overall index. Annual variation (for monthly series).  #>     T3_Periodo Anyo Valor #> 1          M06 2025   2.2 #> 1.1        M05 2025   2.0 #> 1.2        M04 2025   2.2 #> 1.3        M03 2025   2.3 #> 1.4        M02 2025   3.0"},{"path":"https://inedifusion.github.io/ineapir/articles/tips.html","id":"use-of-unnest","dir":"Articles","previous_headings":"","what":"Use of unnest","title":"Tips","text":"request data tables series using functions get_data_table(), get_data_series() get_data_series_filter, $Data column containing data values list data frames, one entry. want get one data frame data values, can pass argument unnest = TRUE.","code":"# Filter with the values wrapper (CPI) filter <- list(values = c(\"variación anual\" , \"variación mensual\", \"índice general\"))  # Request data using the filter and unnest = FALSE ipc <- get_data_table(idTable = 50902, filter = filter, tip = \"A\", nlast = 3)  # We have two entries  ipc[,c(\"COD\",\"Nombre\")] #>         COD                                              Nombre #> 1 IPC251855 Total Nacional. Índice general. Variación mensual.  #> 2 IPC251856   Total Nacional. Índice general. Variación anual.   # Data column is a list of two data frames. One for each entry.   ipc$Data #> [[1]] #>                           Fecha T3_TipoDato T3_Periodo Anyo Valor #> 1 2025-06-01T00:00:00.000+02:00      Avance        M06 2025   0.6 #> 2 2025-05-01T00:00:00.000+02:00  Definitivo        M05 2025   0.1 #> 3 2025-04-01T00:00:00.000+02:00  Definitivo        M04 2025   0.6 #>  #> [[2]] #>                           Fecha T3_TipoDato T3_Periodo Anyo Valor #> 1 2025-06-01T00:00:00.000+02:00      Avance        M06 2025   2.2 #> 2 2025-05-01T00:00:00.000+02:00  Definitivo        M05 2025   2.0 #> 3 2025-04-01T00:00:00.000+02:00  Definitivo        M04 2025   2.2 # Filter with the values wrapper (CPI) filter <- list(values = c(\"variación anual\" , \"variación mensual\", \"índice general\"))  # Request data using the filter and unnest = TRUE ipc <- get_data_table(idTable = 50902, filter = filter, tip = \"A\",                       nlast = 3, unnest = TRUE)  # Unique data frame with 6 rows ipc[,c(\"Nombre\", \"T3_Periodo\", \"Anyo\", \"Valor\")] #>                                                  Nombre T3_Periodo Anyo Valor #> 1   Total Nacional. Índice general. Variación mensual.         M06 2025   0.6 #> 1.1 Total Nacional. Índice general. Variación mensual.         M05 2025   0.1 #> 1.2 Total Nacional. Índice general. Variación mensual.         M04 2025   0.6 #> 2     Total Nacional. Índice general. Variación anual.         M06 2025   2.2 #> 2.1   Total Nacional. Índice general. Variación anual.         M05 2025   2.0 #> 2.2   Total Nacional. Índice general. Variación anual.         M04 2025   2.2"},{"path":"https://inedifusion.github.io/ineapir/articles/tips.html","id":"use-of-metanames-and-metacodes","dir":"Articles","previous_headings":"","what":"Use of metanames and metacodes","title":"Tips","text":"pass argument metanames = TRUE get additional columns contain names values extracted metadata information. get additional columns containing codes ids values extracted metadata information pass argument metacodes = TRUE.","code":"# Filter for total population of men and women  filter <- list(nacionalidad = \"total\", sexo = c(\"hombres\", \"mujeres\"))  # Table: Resident population by date, sex, age group and nationality poblacion <- get_data_table(idTable = 9674, filter = filter, validate = FALSE,                              tip = \"AM\", unnest = TRUE, nlast = 1) # Names of columns names(poblacion) #>  [1] \"COD\"         \"Nombre\"      \"T3_Unidad\"   \"T3_Escala\"   \"MetaData\"    #>  [6] \"Fecha\"       \"T3_TipoDato\" \"T3_Periodo\"  \"Anyo\"        \"Valor\"  # Request data with metanames = TRUE poblacion <- get_data_table(idTable = 9674, filter = filter, validate = FALSE,                              tip = \"AM\", unnest = TRUE, nlast = 1,                             metanames =  TRUE, metacodes = TRUE)  # Additional columns of Nacionalidad, Edad and Sexo names(poblacion) #>  [1] \"COD\"                             \"Nombre\"                          #>  [3] \"T3_Unidad\"                       \"T3_Escala\"                       #>  [5] \"MetaData\"                        \"Nacionalidad\"                    #>  [7] \"Nacionalidad.Codigo\"             \"Nacionalidad.Id\"                 #>  [9] \"Grupo.quinquenal.de.edad\"        \"Grupo.quinquenal.de.edad.Codigo\" #> [11] \"Grupo.quinquenal.de.edad.Id\"     \"Sexo\"                            #> [13] \"Sexo.Codigo\"                     \"Sexo.Id\"                         #> [15] \"Fecha\"                           \"T3_TipoDato\"                     #> [17] \"T3_Periodo\"                      \"Anyo\"                            #> [19] \"Valor\""},{"path":"https://inedifusion.github.io/ineapir/articles/tips.html","id":"filtering-with-regular-expresions","dir":"Articles","previous_headings":"","what":"Filtering with regular expresions","title":"Tips","text":"use shortcuts names filter, can also include values regular expressions helps us filter data better.","code":"# Filter with a regular expression for ages between 20 and 25 years old filter <- list(sexo = \"total\", edad = \"2[0-5]+\")  # Request data using the filter with a regular expression pob <- get_data_table(idTable = 56934, filter = filter, tip = \"A\", nlast = 1,                       unnest = TRUE)  # Only ages between 20 and 25 years old pob[,c(\"Nombre\", \"Anyo\", \"Valor\")] #>                                                Nombre Anyo  Valor #> 1 Total Nacional. 20 años. Total. Población. Número.  2024 525418 #> 2 Total Nacional. 21 años. Total. Población. Número.  2024 514156 #> 3 Total Nacional. 22 años. Total. Población. Número.  2024 517077 #> 4 Total Nacional. 23 años. Total. Población. Número.  2024 526390 #> 5 Total Nacional. 24 años. Total. Población. Número.  2024 519720 #> 6 Total Nacional. 25 años. Total. Población. Número.  2024 511085"},{"path":"https://inedifusion.github.io/ineapir/articles/usage.html","id":"example-1--interactive-time-series","dir":"Articles","previous_headings":"","what":"Example 1. Interactive time series","title":"Usage examples","text":"","code":"library(ineapir) library(plotly) #> Loading required package: ggplot2 #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout  # Filter cpi overall index filter <- list(values = c(\"variación anual\" , \"índice general\"))  # Request data of cpi # Table url: https://www.ine.es/jaxiT3/Tabla.htm?t=50902&L=0 general <- get_data_table(idTable = 50902, filter = filter, unnest = TRUE,                           tip = \"A\", validate = FALSE)  # Filter core cpi filter <- list(values = c(\"variación anual\" ,                         \"general sin alimentos no elaborados ni productos energéticos\"))  # Request data of core cpi # Table url: https://www.ine.es/jaxiT3/Tabla.htm?t=50907&L=0 subyacente <- get_data_table(idTable = 50907, filter = filter, unnest = TRUE,                              tip = \"A\", validate = FALSE)  # Format Fecha column as date general$Fecha <- as.Date(general$Fecha) subyacente$Fecha <- as.Date(subyacente$Fecha)  # Plot cpi overall index fig <- plot_ly(general, x = ~Fecha, y = ~Valor, name = 'General',                type = 'scatter', mode = 'lines')  ## Plot core cpi fig <- fig %>% add_trace(y = ~subyacente$Valor, name = 'Subyacente',                          mode = 'lines') %>%   layout(yaxis = list(title=\"Variación anual (%)\"),          legend = list(title=list(text='<b> IPC <\/b>'),                        x = 0.25,                        y = -0.25,                        orientation = 'h'),          hovermode = 'x') %>%   config(displayModeBar = FALSE)  fig"},{"path":"https://inedifusion.github.io/ineapir/articles/usage.html","id":"example-2--population-pyramid","dir":"Articles","previous_headings":"","what":"Example 2. Population pyramid","title":"Usage examples","text":"","code":"library(forcats)  # Filter for total population of men and women  filter <- list(nacionalidad = \"total\", sexo = c(\"hombres\", \"mujeres\"))  # Table: Resident population by date, sex, age group and nationality # Table url: https://www.ine.es/jaxiT3/Tabla.htm?t=56936&L=0 poblacion <- get_data_table(idTable = 56936, filter = filter, validate = FALSE,                              tip = \"AM\", unnest = TRUE, metanames = TRUE)  # Filter and calculate percentages pob <- poblacion %>%    filter(Grupo.quinquenal.de.edad != \"Todas las edades\" & T3_Periodo == \"1 de enero de\") %>%   group_by(Anyo) %>%    mutate(Total = sum(Valor),           Porcentaje = Valor/Total*100,           Grupo.quinquenal.de.edad = fct_inorder(trimws(Grupo.quinquenal.de.edad))) %>%   ungroup() %>%   mutate(Porcentaje = ifelse(Sexo == \"Hombres\",                              -Porcentaje, Porcentaje))    # Pyramid using plotly fig <- plot_ly(pob, x = ~Porcentaje , y = ~Grupo.quinquenal.de.edad, color = ~Sexo,                 colors = c(\"blue\", \"red\"), type = 'bar', frame = ~Anyo) %>%         layout(bargap = 0.1, barmode = 'overlay',               xaxis = list(hoverformat = '.2f'),               yaxis = list(title=\"Edad\"),               title = 'Población residente por sexo y grupo de edad') %>%        animation_slider(currentvalue = list(prefix = \"Año: \")) %>%        config(displayModeBar = FALSE)  fig"},{"path":"https://inedifusion.github.io/ineapir/articles/usage.html","id":"example-3--interactive-bar-chart-","dir":"Articles","previous_headings":"","what":"Example 3. Interactive bar chart.","title":"Usage examples","text":"","code":"# Filter for life expectancy filter = list(ccaa = \"\", sexo = \"total\", values = c(\"0 años\", \"esperanza de vida\"))  # Table: Mortality tables by year, autonomous communities and cities, sex, age and functions. # Table url: https://www.ine.es/jaxiT3/Tabla.htm?t=27154&L=0 esp <- get_data_table(idTable = 27154, filter = filter, nlast = 1, unnest = TRUE,                        metanames = TRUE, tip = \"AM\", validate = FALSE)  # Bar chart using plotly fig <- plot_ly(esp,                 x = ~esp$Comunidades.y.Ciudades.Autónomas,                y = ~Valor, type = \"bar\") %>%        config(displayModeBar = FALSE) %>%        layout(xaxis = list(title=\"\", tickangle = -45),               yaxis = list(title = \"Años\", hoverformat = '.2f'),               title = sprintf(\"Esperanza de vida al nacimiento por Comunidad Autónoma (%s)\",                               esp$Anyo[1])               )  fig"},{"path":"https://inedifusion.github.io/ineapir/articles/usage.html","id":"example-4--interactive-map-","dir":"Articles","previous_headings":"","what":"Example 4. Interactive map.","title":"Usage examples","text":"","code":"library(leaflet) library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE library(htmltools)  # Get the boundaries of the autonomous communities ccaa <- read_sf(\"https://www.ine.es/wstempus/geojs/ES/CONTORNOS/70\")  # Filter for life expectancy filter = list(ccaa = \"\", sexo = \"total\", values = c(\"0 años\", \"esperanza de vida\"))  # Table: Mortality tables by year, autonomous communities and cities, sex, age and functions. # Table url: https://www.ine.es/jaxiT3/Tabla.htm?t=27154&L=0 esp <- get_data_table(idTable = 27154, filter = filter, nlast = 1, unnest = TRUE,                        metacodes = TRUE, tip = \"AM\", validate = FALSE)  # Select a set on columns from data esp <- subset(esp, select = c(\"Comunidades.y.Ciudades.Autónomas.Id\", \"T3_Periodo\",                                 \"Anyo\",\"Valor\"))  # Join boundaries information with data information ccaa <- merge(ccaa, esp, by.x = \"id_region\",                by.y = \"Comunidades.y.Ciudades.Autónomas.Id\" )  # Create the palette of the legend pal <- colorBin(\"plasma\", domain = NULL, bins = c(quantile(ccaa$Valor)))  # Labels of the map labels <- sprintf(   \"<strong>%s<\/strong><br/> Esperanza de vida al nacimiento: %.2f años \",   ccaa$nom_region, ccaa$Valor ) %>% lapply(htmltools::HTML)   # Create the map m <- leaflet(ccaa) %>%    addTiles() %>%   setView(-4, 40, zoom = 5) %>%   addPolygons(fillOpacity = 0.8,               fillColor = ~pal(Valor),               weight = 1,               color = \"white\",               label = labels,               labelOptions = labelOptions(                 style = list(\"font-weight\" = \"normal\", padding = \"3px 8px\"),                 textsize = \"15px\",                 direction = \"auto\"               ),               highlightOptions = highlightOptions(fillOpacity = 1, bringToFront = TRUE,                                                    weight = 2, color = \"white\")   ) %>%   addLegend(pal = pal, values = ~Valor, opacity = 1.0, position = \"bottomright\",             labFormat = labelFormat(suffix = \" años\", digits = 2),             title = sprintf(\"Esperanza de vida al nacimiento (%s)\",                             esp$Anyo[1]))  m"},{"path":"https://inedifusion.github.io/ineapir/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Crespo. Author, maintainer. Instituto Nacional de Estadistica, INE. Copyright holder.","code":""},{"path":"https://inedifusion.github.io/ineapir/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Crespo D (2025). ineapir: Obtaining data published National Statistics Institute. R package version 0.2.2, https://github.com/es-ine/ineapir.","code":"@Manual{,   title = {ineapir: Obtaining data published by the National Statistics Institute},   author = {David Crespo},   year = {2025},   note = {R package version 0.2.2},   url = {https://github.com/es-ine/ineapir}, }"},{"path":[]},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Obtaining data published by the National Statistics Institute","text":"ineapir provides set functions obtain open data metadata published National Statistics Institute Spain (INE). data obtained thanks calls INE API service allows access via URL requests available statistical information published INE.","code":""},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Obtaining data published by the National Statistics Institute","text":"install development version ineapir GitHub. Alternatively, can download source code zip file install follows.","code":"remotes::install_github(\"es-ine/ineapir\") remotes::install_local(path = \"path/to/file.zip\")"},{"path":[]},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"data-request-examples","dir":"","previous_headings":"","what":"Data request examples","title":"Obtaining data published by the National Statistics Institute","text":"data associated series object can grouped together statistical tables. field named ‘Valor’ one contains data. rest fields necessary data well defined.","code":""},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"obtaining-data-from-a-table","dir":"","previous_headings":"Data request examples","what":"Obtaining data from a table","title":"Obtaining data published by the National Statistics Institute","text":"get data table necessary pass idTable argument, identification code table, function get_data_table(). get last n data table necessary pass nlast argument well.","code":"library(ineapir)  # We use the function get_data_table with the argument idTable # and the argument tip = 'A' for a more friendly output table <- get_data_table(idTable = 50902, tip = \"A\")  # Each row represents a series table[1,c(\"COD\", \"Nombre\")] #>         COD                                   Nombre #> 1 IPC251852 Total Nacional. Índice general. Índice.  # The Data column contains a data frame for each row with the values  # of the different periods of each series head(table$Data[[1]]) #>                           Fecha T3_TipoDato T3_Periodo Anyo   Valor #> 1 2025-05-01T00:00:00.000+02:00  Definitivo        M05 2025 118.077 #> 2 2025-04-01T00:00:00.000+02:00  Definitivo        M04 2025 117.997 #> 3 2025-03-01T00:00:00.000+01:00  Definitivo        M03 2025 117.260 #> 4 2025-02-01T00:00:00.000+01:00  Definitivo        M02 2025 117.191 #> 5 2025-01-01T00:00:00.000+01:00  Definitivo        M01 2025 116.733 #> 6 2024-12-01T00:00:00.000+01:00  Definitivo        M12 2024 116.534  # We can concatenate all data frames into one using unnest = TRUE table <- get_data_table(idTable = 50902, tip = \"A\", unnest = TRUE) head(table[,c(\"COD\", \"Nombre\", \"Fecha\", \"Valor\")]) #>           COD                                   Nombre #> 1   IPC251852 Total Nacional. Índice general. Índice.  #> 1.1 IPC251852 Total Nacional. Índice general. Índice.  #> 1.2 IPC251852 Total Nacional. Índice general. Índice.  #> 1.3 IPC251852 Total Nacional. Índice general. Índice.  #> 1.4 IPC251852 Total Nacional. Índice general. Índice.  #> 1.5 IPC251852 Total Nacional. Índice general. Índice.  #>                             Fecha   Valor #> 1   2025-05-01T00:00:00.000+02:00 118.077 #> 1.1 2025-04-01T00:00:00.000+02:00 117.997 #> 1.2 2025-03-01T00:00:00.000+01:00 117.260 #> 1.3 2025-02-01T00:00:00.000+01:00 117.191 #> 1.4 2025-01-01T00:00:00.000+01:00 116.733 #> 1.5 2024-12-01T00:00:00.000+01:00 116.534 # We use the function get_data_table with arguments idTable and nlast table <- get_data_table(idTable = 50902, nlast = 2) table[1,c(\"COD\", \"Nombre\")] #>         COD                                   Nombre #> 1 IPC251852 Total Nacional. Índice general. Índice. head(table$Data[[1]]) #>         Fecha FK_TipoDato FK_Periodo Anyo   Valor Secreto #> 1 1.74605e+12           1          5 2025 118.077   FALSE"},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"obtaining-data-from-a-series","dir":"","previous_headings":"Data request examples","what":"Obtaining data from a series","title":"Obtaining data published by the National Statistics Institute","text":"get last data series necessary pass codSeries argument, identification code series, function get_data_series(). get last n data series necessary pass nlast argument well. Additionally, possible obtain data series two dates. date must specific format (yyyy/mm/dd). end date specified obtain data start date.","code":"# We use the function get_data_series with the argument codSeries series <- get_data_series(codSeries = \"IPC251856\", tip = \"A\") series$Data #>                           Fecha T3_TipoDato T3_Periodo Anyo Valor #> 1 2025-06-01T00:00:00.000+02:00      Avance        M06 2025   2.2 # We use the function get_data_series with arguments codSeries and nlast series <- get_data_series(codSeries = \"IPC251856\", tip = \"A\", nlast = 5) series$Data #>                           Fecha T3_TipoDato T3_Periodo Anyo Valor #> 1 2025-02-01T00:00:00.000+01:00  Definitivo        M02 2025   3.0 #> 2 2025-03-01T00:00:00.000+01:00  Definitivo        M03 2025   2.3 #> 3 2025-04-01T00:00:00.000+02:00  Definitivo        M04 2025   2.2 #> 4 2025-05-01T00:00:00.000+02:00  Definitivo        M05 2025   2.0 #> 5 2025-06-01T00:00:00.000+02:00      Avance        M06 2025   2.2  # Using unnest = TRUE series <- get_data_series(codSeries = \"IPC251856\", tip = \"A\", nlast = 5,                           unnest = TRUE) head(series[,c(\"COD\", \"Nombre\", \"Fecha\", \"Valor\")]) #>           COD                                            Nombre #> 1   IPC251856 Total Nacional. Índice general. Variación anual.  #> 1.1 IPC251856 Total Nacional. Índice general. Variación anual.  #> 1.2 IPC251856 Total Nacional. Índice general. Variación anual.  #> 1.3 IPC251856 Total Nacional. Índice general. Variación anual.  #> 1.4 IPC251856 Total Nacional. Índice general. Variación anual.  #>                             Fecha Valor #> 1   2025-02-01T00:00:00.000+01:00   3.0 #> 1.1 2025-03-01T00:00:00.000+01:00   2.3 #> 1.2 2025-04-01T00:00:00.000+02:00   2.2 #> 1.3 2025-05-01T00:00:00.000+02:00   2.0 #> 1.4 2025-06-01T00:00:00.000+02:00   2.2 # We use the function get_data_series with arguments codSeries, dateStart and dataEnd series <- get_data_series(codSeries = \"IPC251856\", dateStart = \"2023/01/01\",                            dateEnd = \"2023/04/01\") series$Data #>          Fecha FK_TipoDato FK_Periodo Anyo Valor Secreto #> 1 1.672528e+12           1          1 2023   5.9   FALSE #> 2 1.675206e+12           1          2 2023   6.0   FALSE #> 3 1.677625e+12           1          3 2023   3.3   FALSE #> 4 1.680300e+12           1          4 2023   4.1   FALSE"},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"metadata-request-examples","dir":"","previous_headings":"","what":"Metadata request examples","title":"Obtaining data published by the National Statistics Institute","text":"Structural metadata objects describe time series statistical tables allow definition. database objects associated identifier essential correct use service.","code":""},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"obtaining-statistical-operations","dir":"","previous_headings":"Metadata request examples","what":"Obtaining statistical operations","title":"Obtaining data published by the National Statistics Institute","text":"database contains information short-term statistical operations, periodicity disseminating results less year, well structural statistical operations. can get operations using function get_metadata_operations(). operation can identify numerical code (‘Id’), alphabetic code (‘Codigo’) code statistical operation Inventory Statistical Operations (IOE + ‘Cod_IOE’). obtain information one operation pass operation argument one codes.","code":"# We use the function get_metadata_operations operations <- get_metadata_operations() head(operations) #>   Id Cod_IOE                                                 Nombre Codigo #> 1  4   30147           Estadística de Efectos de Comercio Impagados     EI #> 2  6   30211                     Índice de Coste Laboral Armonizado   ICLA #> 3  7   30168 Estadística de Transmisión de Derechos de la Propiedad   ETDP #> 4 10   30256                                    Indicadores Urbanos     UA #> 5 13   30219                Estadística del Procedimiento Concursal    EPC #> 6 14   30182                Índices de Precios del Sector Servicios    IPS #>                                                                                                     Url #> 1                                                                                                  <NA> #> 2                                                                                                  <NA> #> 3                                                                                                  <NA> #> 4 https://www.ine.es/dyngs/INEbase/es/operacion.htm?c=Estadistica_C&cid=1254736176957&idp=1254735976608 #> 5                                                                                                  <NA> #> 6                                                                                                  <NA> # We use the function get_metadata_operations with argument operation operation <- get_metadata_operations(operation = \"IPC\") as.data.frame(operation) #>   Id Cod_IOE                             Nombre Codigo #> 1 25   30138 Índice de Precios de Consumo (IPC)    IPC"},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"obtaining-variables","dir":"","previous_headings":"Metadata request examples","what":"Obtaining variables","title":"Obtaining data published by the National Statistics Institute","text":"can get variables system using function get_metadata_variables(). variable can identify numerical code (‘Id’). addition, pass operation argument obtain variables used operation.","code":"# We use the function get_metadata_variables variables <- get_metadata_variables() head(variables) #>    Id                           Nombre Codigo #> 1 349            Totales Territoriales    NAC #> 2 954                            Total        #> 3  70 Comunidades y Ciudades Autónomas   CCAA #> 4 516                     Nacionalidad      1 #> 5 955       Cultivos, pastos y huertos        #> 6 956              SAU y Otras tierras # We use the function get_metadata_variables with argument operation, # e.g., operation code = 'IPC' variables <- get_metadata_variables(operation = \"IPC\") head(variables) #>    Id                           Nombre Codigo #> 1   3                     Tipo de dato        #> 2  70 Comunidades y Ciudades Autónomas   CCAA #> 3 115                       Provincias   PROV #> 4 269           Grupos especiales 2001        #> 5 270                    Rúbricas 2001        #> 6 349            Totales Territoriales    NAC"},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"obtaining-values","dir":"","previous_headings":"Metadata request examples","what":"Obtaining values","title":"Obtaining data published by the National Statistics Institute","text":"get values variable can take necessary pass variable argument, identifier variable, function get_metadata_values(). value can identify numerical code (‘Id’). addition, pass operation argument well obtain values variable takes particular operation.","code":"# We use the function get_metadata_values with argument variable, # e.g., id = 3 (variable 'Tipo de dato') values <- get_metadata_values(variable = 3) head(values) #>   Id Fk_Variable                                                   Nombre #> 1 70           3                                             Datos brutos #> 2 71           3 Datos corregidos de efectos estacionales y de calendario #> 3 72           3                                                Dato base #> 4 73           3                                     Variación trimestral #> 5 74           3                                          Variación anual #> 6 75           3                                                    Euros #>   Codigo #> 1        #> 2        #> 3        #> 4        #> 5        #> 6 # We use the function get_metadata_values with arguments operation and variable, # e.g., operation code = 'IPC' values <- get_metadata_values(operation = \"IPC\", variable = 3) head(values) #>   Id Fk_Variable            Nombre Codigo #> 1 72           3         Dato base        #> 2 74           3   Variación anual        #> 3 83           3            Índice        #> 4 84           3 Variación mensual        #> 5 85           3       Media anual      M #> 6 86           3   Variación anual"},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"obtaining-tables","dir":"","previous_headings":"Metadata request examples","what":"Obtaining tables","title":"Obtaining data published by the National Statistics Institute","text":"can get tables associated statistical operation using function get_metadata_tables_operation(). table defined different groups selection combo boxes values one several variables take. obtain variables values present table first query groups define table using function get_metadata_table_groups(). identification codes groups, can query values specific group using function get_metadata_table_values(). Alternatively, can use get_metadata_table_varval() function get variables values present table.","code":"# We use the function get_metadata_tables with argument operation tables <- get_metadata_tables_operation(operation = \"IPC\") head(tables[,c(\"Id\",\"Nombre\")]) #>      Id #> 1 24077 #> 2 25331 #> 3 35083 #> 4 50902 #> 5 50908 #> 6 50911 #>                                                                      Nombre #> 1                       Índice general nacional. Series desde enero de 1961 #> 2                                Ponderaciones: general y de grupos ECOICOP #> 3           Índices nacionales: Componentes para el análisis de la COVID-19 #> 4                           Índices nacionales: general y de grupos ECOICOP #> 5    Índices nacionales a impuestos constantes: general y de grupos ECOICOP #> 6 Tasa de variacion del índice general nacional. Series desde enero de 1961 # We use the function get_metadata_table_groups with argument idTable groups <- get_metadata_table_groups(idTable = 50902) head(groups) #>       Id         Nombre #> 1 110889 Grupos ECOICOP #> 2 110890   Tipo de dato # We use the function get_metadata_table_values with arguments idTable and idGroup values <- get_metadata_table_values(idTable = 50902, idGroup = 110889) head(values, 4) #>       Id Fk_Variable                             Nombre Codigo #> 1 304092         762                     Índice general     00 #> 2 304093         762 Alimentos y bebidas no alcohólicas     01 #> 3 304094         762       Bebidas alcohólicas y tabaco     02 #> 4 304095         762                  Vestido y calzado     03 #>   FK_JerarquiaPadres #> 1               NULL #> 2             304092 #> 3             304092 #> 4             304092 # Using the function get_metadata_table_varval values <- get_metadata_table_varval(idTable = 50902) head(values, 4) #>       Id Fk_Variable                             Nombre Codigo #> 1 304092         762                     Índice general     00 #> 2 304093         762 Alimentos y bebidas no alcohólicas     01 #> 3 304094         762       Bebidas alcohólicas y tabaco     02 #> 4 304095         762                  Vestido y calzado     03"},{"path":"https://inedifusion.github.io/ineapir/index.html","id":"obtaining-series","dir":"","previous_headings":"Metadata request examples","what":"Obtaining series","title":"Obtaining data published by the National Statistics Institute","text":"data associated series object. obtain information particular series necessary pass codSeries argument, identification code series, function get_metadata_series(). get values variables define series necessary pass codSeries argument well. get series define table necessary pass idTable argument, identification code table, function get_metadata_series_table().","code":"# We use the function get_metadata_series with argument codSeries series <- get_metadata_series(codSeries = \"IPC251856\") as.data.frame(series) #>       Id       COD FK_Operacion #> 1 251856 IPC251856           25 #>                                              Nombre Decimales FK_Periodicidad #> 1 Total Nacional. Índice general. Variación anual.          1               1 #>   FK_Publicacion FK_Clasificacion FK_Escala FK_Unidad #> 1              8               90         1       135 # We use the function get_metadata_series_values with argument codSeries values <- get_metadata_series_values(codSeries = \"IPC251856\") head(values) #>       Id Fk_Variable          Nombre Codigo #> 1  16473         349  Total Nacional     00 #> 2 304092         762  Índice general     00 #> 3     74           3 Variación anual # We use the function get_metadata_series_table with argument idTable series <- get_metadata_series_table(idTable = 50902) head(series[,c(\"COD\", \"Nombre\")], 4) #>         COD                                                          Nombre #> 1 IPC251852                        Total Nacional. Índice general. Índice.  #> 2 IPC251855             Total Nacional. Índice general. Variación mensual.  #> 3 IPC251856               Total Nacional. Índice general. Variación anual.  #> 4 IPC251858 Total Nacional. Índice general. Variación en lo que va de año."},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from a specific series — get_data_series","title":"Get data from a specific series — get_data_series","text":"Retrieve data series published INE calling API","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from a specific series — get_data_series","text":"","code":"get_data_series(   codSeries = NULL,   nlast = 1,   dateStart = NULL,   dateEnd = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE,   unnest = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from a specific series — get_data_series","text":"codSeries (string): Code series. information codes click link. nlast (int): number periods retrieve. default set 1 period. dateStart (string): initial date requested data. required format yyyy/mm/dd. Additionally, dateStart can vector dates, date represents start date individual ranges end date found position dateEnd vector. dateStart dateEnd equal, specified dates retrieved. end date entered, dates queried, corresponding start date last available period. dateEnd (string): end date requested data. required format yyyy/mm/dd. Additionally, dateEnd can vector dates, date represents end date individual ranges initial date found position dateStart vector. length dateEnd vector must less equal length dateStart vector. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. verbose (logical): print additional information, including URL call API service. unnest (logical): set TRUE obtain single data frame data","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from a specific series — get_data_series","text":"Data frame data series according code specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from a specific series — get_data_series","text":"","code":"if (FALSE) { # \\dontrun{ get_data_series(codSeries = \"IPC251856\") get_data_series(codSeries = \"IPC251856\", nlast = 5) get_data_series(codSeries = \"IPC251856\", dateStart = \"2024/01/01\") get_data_series(codSeries = \"IPC251856\", dateStart = \"2023/01/01\", dateEnd = \"2023/05/01\") get_data_series(codSeries = \"IPC251856\", dateStart = c(\"2023/01/01\",\"2024/01/01\"), dateEnd = c(\"2023/01/01\",\"2024/01/01\")) get_data_series(codSeries = \"IPC251856\", dateStart = c(\"2023/01/01\",\"2024/01/01\"), dateEnd = c(\"2023/03/01\",\"2024/03/01\")) get_data_series(codSeries = \"IPC251856\", dateStart = c(\"2023/01/01\",\"2024/01/01\"), dateEnd = c(\"2023/03/01\")) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from series for a specific operation given a filter — get_data_series_filter","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"Get data series specific operation given filter","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"","code":"get_data_series_filter(   operation = NULL,   filter = NULL,   periodicity = NULL,   nlast = 1,   dateStart = NULL,   dateEnd = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   page = 1,   validate = TRUE,   verbose = FALSE,   unnest = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"operation (string): Code operation. obtain list available operations see get_metadata_operations(). filter (list): list variables values. periodicity (int): id periodicity series. Common periodicities: 1 (monthly), 3 (quarterly), 6 (bi-annual), 12 (annual). obtain list periodicities see get_metadata_periodicity(). nlast (int): number periods retrieve. default set 1 period. dateStart (string): initial date requested data. required format yyyy/mm/dd. Additionally, dateStart can vector dates, date represents start date individual ranges end date found position dateEnd vector. dateStart dateEnd equal, specified dates retrieved. end date entered, dates queried, corresponding start date last available period. dateEnd (string): end date requested data. required format yyyy/mm/dd. Additionally, dateEnd can vector dates, date represents end date individual ranges initial date found position dateStart vector. length dateEnd vector must less equal length dateStart vector. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated. Default value set 1. validate (logical): validate input parameters. FALSE value means fewer API calls. Therefore, recommended set FALSE doubt validity input parameters, including filter. verbose (logical): print additional information, including URL call API service. unnest (logical): obtain single data frame data","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series_filter.html","id":"filtering-data-from-series","dir":"Reference","previous_headings":"","what":"Filtering data from series","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"request data series possibility filtering data fly using metadata information variables values define series. get variables given operation see get_metadata_variables() get values specific variable see get_metadata_values(). See also get_metadata_series_varval() get values .","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series_filter.html","id":"filter-format","dir":"Reference","previous_headings":"","what":"Filter format","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series_filter.html","id":"using-shortcuts","dir":"Reference","previous_headings":"","what":"Using shortcuts","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"Additionally, shortcuts can used filter. simplify filtering approach using standardized names variable IDs therefore simplify use. format : list(shortcut_variable1 = name1, shortcut_variable2 = name2). Besides, values wrapper can also used: list(values = c(name1, name2). see list available shortcuts, see get_filter_shortcuts() function. Let’s also remark better performance recommended use numeric codes.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"Data frame data series according operation filter specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_series_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from series for a specific operation given a filter — get_data_series_filter","text":"","code":"if (FALSE) { # \\dontrun{ get_data_series_filter(operation = \"IPC\", periodicity = 1,                        filter = list(\"115\"= c(\"29\",\"28\"), \"3\" = \"84\", \"762\" = \"\")) get_data_series_filter(operation = \"IPC\", periodicity = 1, nlast = 5, unnest = TRUE,                        filter = list(\"115\"= \"28\", \"3\" = \"84\", \"762\" = \"304092\")) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from a specific table — get_data_table","title":"Get data from a specific table — get_data_table","text":"Get data specific table","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from a specific table — get_data_table","text":"","code":"get_data_table(   idTable = NULL,   filter = NULL,   nlast = NULL,   dateStart = NULL,   dateEnd = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE,   unnest = FALSE,   metanames = FALSE,   metacodes = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from a specific table — get_data_table","text":"idTable (int): id table. information ids click link. filter (list): list variables values. nlast (int): number periods retrieve. default retrieves available periods. dateStart (string): initial date requested data. required format yyyy/mm/dd. Additionally, dateStart can vector dates, date represents start date individual ranges end date found position dateEnd vector. dateStart dateEnd equal, specified dates retrieved. end date entered, dates queried, corresponding start date last available period. dateEnd (string): end date requested data. required format yyyy/mm/dd. Additionally, dateEnd can vector dates, date represents end date individual ranges initial date found position dateStart vector. length dateEnd vector must less equal length dateStart vector. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. FALSE value means fewer API calls. Therefore, recommended set FALSE doubt validity input parameters, including filter. verbose (logical): print additional information, including URL call API service. unnest (logical): set TRUE obtain single data frame data. metanames (logical): set TRUE extract name values defined table. names extracted metadata information (mandatory include 'M' tip parameter). Several columns created corresponding values different variables. metacodes (logical): set TRUE extract codes ids values defined table. codes ids extracted metadata information (mandatory include 'M' tip parameter). Several columns created corresponding values different variables.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_table.html","id":"filtering-data-from-tables","dir":"Reference","previous_headings":"","what":"Filtering data from tables","title":"Get data from a specific table — get_data_table","text":"request data tables possibility filtering data fly using metadata information variables values define series. See get_metadata_table_varval() get values . different approaches build filter depending table type.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_table.html","id":"case-one-tempus-table","dir":"Reference","previous_headings":"","what":"Case one: tempus table","title":"Get data from a specific table — get_data_table","text":"URL example. tempus table filter based ids. format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_table.html","id":"case-two-px-tables","dir":"Reference","previous_headings":"","what":"Case two: px tables","title":"Get data from a specific table — get_data_table","text":"URL example. px table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\").","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_table.html","id":"case-three-tpx-table","dir":"Reference","previous_headings":"","what":"Case three: tpx table","title":"Get data from a specific table — get_data_table","text":"URL example. tpx table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\"). URL example. tpx tables contain variable ids value ids. case, can use ids instead codes build filter. add alias ~id end id: list(id_variable1~id = id_value1~id, id_variable2~id = id_value2~id).","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_table.html","id":"using-shortcuts","dir":"Reference","previous_headings":"","what":"Using shortcuts","title":"Get data from a specific table — get_data_table","text":"Additionally, shortcuts can used filter. simplify filtering approach using standardized names variable IDs therefore simplify use. format tempus table : list(shortcut_variable1 = name1, shortcut_variable2 = name2). However, px tpx tables format : list(values = c(name1, name2). values wrapper can also used tempus tables. see list available shortcuts, see get_filter_shortcuts() function. Let’s also remark better performance recommended use numeric ids tempus tables alphanumeric codes px tpx tables.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from a specific table — get_data_table","text":"Data frame data table according id specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_data_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from a specific table — get_data_table","text":"","code":"if (FALSE) { # \\dontrun{ get_data_table(idTable = 50902) get_data_table(idTable = 50902, unnest = TRUE, tip= \"A\", filter <- list(\"3\" = \"74\", \"762\" = \"304092\"), dateStart = \"2024/01/01\") get_data_table(idTable = 50902, unnest = TRUE, tip= \"A\", filter <- list(\"3\" = \"74\", \"762\" = \"304092\"),  dateStart = \"2023/01/01\", dateEnd = \"2023/05/01\") get_data_table(idTable = 50902, unnest = TRUE, tip= \"A\", filter <- list(\"3\" = \"74\", \"762\" = \"304092\"), dateStart = c(\"2023/01/01\",\"2024/01/01\"), dateEnd = c(\"2023/01/01\",\"2024/01/01\")) get_data_table(idTable = 50902, unnest = TRUE, tip= \"A\", filter <- list(\"3\" = \"74\", \"762\" = \"304092\"), dateStart = c(\"2023/01/01\",\"2024/01/01\"), dateEnd = c(\"2023/03/01\",\"2024/03/01\")) get_data_table(idTable = 50902, unnest = TRUE, tip= \"A\", filter <- list(\"3\" = \"74\", \"762\" = \"304092\"), dateStart = c(\"2023/01/01\",\"2024/01/01\"), dateEnd = c(\"2023/03/01\")) get_data_table(idTable = 50902, nlast = 2, unnest = TRUE, metanames = TRUE,                metacodes = TRUE, tip = \"M\") get_data_table(idTable = 8105, filter = list(\"18\"=\"454\"), verbose = TRUE) get_data_table(idTable = 33387,                filter = list(tipodematerial = c(\"extraccionnacional\",                                                 \"2mineralesmetalicosmineralenbruto\"))) get_data_table(idTable = \"t20/e245/p08/l0/01001.px\",                filter = list(edad3gruposdeedad = \"015anos\",                              sexo = c(\"mujeres\", \"hombres\"))) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_filter_shortcuts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all available filter shortcuts — get_filter_shortcuts","title":"Get all available filter shortcuts — get_filter_shortcuts","text":"Get available filter shortcuts","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_filter_shortcuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all available filter shortcuts — get_filter_shortcuts","text":"","code":"get_filter_shortcuts(lang = \"ES\", validate = TRUE, verbose = FALSE)"},{"path":"https://inedifusion.github.io/ineapir/reference/get_filter_shortcuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all available filter shortcuts — get_filter_shortcuts","text":"lang (string): language. Set 'ES' Spanish version shortcuts set 'EN' English version shortcuts. validate (logical): validate input parameters. verbose (logical): print additional information.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_filter_shortcuts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all available filter shortcuts — get_filter_shortcuts","text":"Data frame information available filter shortcuts","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_filter_shortcuts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all available filter shortcuts — get_filter_shortcuts","text":"","code":"if (FALSE) { # \\dontrun{ get_filter_shortcuts() get_filter_shortcuts(lang = \"EN\") } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_classifications.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all available classifications — get_metadata_classifications","title":"Get all available classifications — get_metadata_classifications","text":"Get available classifications","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_classifications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all available classifications — get_metadata_classifications","text":"","code":"get_metadata_classifications(   operation = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_classifications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all available classifications — get_metadata_classifications","text":"operation (string): Code operation. Provide code get classifications given operation. obtain list available operations see get_metadata_operations(). operation specified classifications shown. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_classifications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all available classifications — get_metadata_classifications","text":"Data frame information available classifications","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_classifications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all available classifications — get_metadata_classifications","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_classifications() get_metadata_classifications(operation = \"IPC\") } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_operation_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the operation for a given table — get_metadata_operation_table","title":"Get the operation for a given table — get_metadata_operation_table","text":"Get operation given table","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_operation_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the operation for a given table — get_metadata_operation_table","text":"","code":"get_metadata_operation_table(   idTable = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_operation_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the operation for a given table — get_metadata_operation_table","text":"idTable (int): id table. information ids click link. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_operation_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the operation for a given table — get_metadata_operation_table","text":"Data frame information operation according table specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_operation_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the operation for a given table — get_metadata_operation_table","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_operation_table(idTable = 50902) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_operations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all available operations — get_metadata_operations","title":"Get all available operations — get_metadata_operations","text":"Get available operations","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_operations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all available operations — get_metadata_operations","text":"","code":"get_metadata_operations(   operation = NULL,   lang = \"ES\",   geo = NULL,   page = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_operations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all available operations — get_metadata_operations","text":"operation (string): code operation. obtain list available operations see get_metadata_operations(). operation specified operations shown lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. geo (int): set 0 operations national data set 1 operations data greater level disaggregation. page (int): page number. retrieved result query paginated (page=0 retrieves pages). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_operations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all available operations — get_metadata_operations","text":"Data frame information available operations","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_operations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all available operations — get_metadata_operations","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_operations() get_metadata_operations(operation = \"IPC\") get_metadata_operations(geo = 1) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_periodicity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all available periodicities — get_metadata_periodicity","title":"Get all available periodicities — get_metadata_periodicity","text":"Get available periodicities","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_periodicity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all available periodicities — get_metadata_periodicity","text":"","code":"get_metadata_periodicity(   operation = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_periodicity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all available periodicities — get_metadata_periodicity","text":"operation (string): Code operation. Provide code get periodicities given operation. obtain list available operations see get_metadata_operations(). operation specified periodicities shown. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_periodicity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all available periodicities — get_metadata_periodicity","text":"Data frame information available periodicities","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_periodicity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all available periodicities — get_metadata_periodicity","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_periodicity() get_metadata_periodicity(operation = \"IPC\") } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_publication_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the dates of a publication — get_metadata_publication_dates","title":"Get the dates of a publication — get_metadata_publication_dates","text":"Get dates publication","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_publication_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the dates of a publication — get_metadata_publication_dates","text":"","code":"get_metadata_publication_dates(   publication = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   page = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_publication_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the dates of a publication — get_metadata_publication_dates","text":"publication (int): id publication. obtain list available publications see get_metadata_publications(). det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated (page=0 retrieves pages). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_publication_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the dates of a publication — get_metadata_publication_dates","text":"Data frame information dates publication specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_publication_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the dates of a publication — get_metadata_publication_dates","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_publication_dates(publication = 8) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_publications.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all publications — get_metadata_publications","title":"Get all publications — get_metadata_publications","text":"Get publications","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_publications.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all publications — get_metadata_publications","text":"","code":"get_metadata_publications(   operation = NULL,   det = 0,   lang = \"ES\",   page = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_publications.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all publications — get_metadata_publications","text":"operation (string): code operation. Provide code get publications given operation. obtain list available operations see get_metadata_operations(). operation specified publications shown. det (int): level detail. Valid values: 0, 1 2. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated (page=0 retrieves pages). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_publications.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all publications — get_metadata_publications","text":"Data frame information publications","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_publications.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all publications — get_metadata_publications","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_publications() get_metadata_publications(operation = \"IPC\") } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information for a specific series — get_metadata_series","title":"Get information for a specific series — get_metadata_series","text":"Get information specific series","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information for a specific series — get_metadata_series","text":"","code":"get_metadata_series(   codSeries = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information for a specific series — get_metadata_series","text":"codSeries (string): code series. information codes click link. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information for a specific series — get_metadata_series","text":"Data frame information series according code specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information for a specific series — get_metadata_series","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_series(codSeries = \"IPC206449\") } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the series for a specific operation given a filter — get_metadata_series_filter","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"Get series specific operation given filter","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"","code":"get_metadata_series_filter(   operation = NULL,   filter = NULL,   periodicity = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   page = 1,   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"operation (string): code operation. obtain list available operations see get_metadata_operations(). filter (list): list variables values. periodicity (int): id periodicity series. Common periodicities: 1 (monthly), 3 (quarterly), 6 (bi-annual), 12 (annual). obtain list periodicities see get_metadata_periodicity(). det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated. Default value set 1. validate (logical): validate input parameters. FALSE value means fewer API calls. Therefore, recommended set FALSE doubt validity input parameters, including filter. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_filter.html","id":"filtering-data-from-series","dir":"Reference","previous_headings":"","what":"Filtering data from series","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"request data series possibility filtering data fly using metadata information variables values define series. get variables given operation see get_metadata_variables() get values specific variable see get_metadata_values(). See also get_metadata_series_varval() get values .","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_filter.html","id":"filter-format","dir":"Reference","previous_headings":"","what":"Filter format","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_filter.html","id":"using-shortcuts","dir":"Reference","previous_headings":"","what":"Using shortcuts","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"Additionally, shortcuts can used filter. simplify filtering approach using standardized names variable IDs therefore simplify use. format : list(shortcut_variable1 = name1, shortcut_variable2 = name2). Besides, values wrapper can also used: list(values = c(name1, name2). see list available shortcuts, see get_filter_shortcuts() function. Let’s also remark better performance recommended use numeric codes.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"Data frame information series according operation filter specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the series for a specific operation given a filter — get_metadata_series_filter","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_series_filter(operation = \"IPC\", periodicity = 1,                            filter = list(\"115\"= \"29\", \"3\" = \"84\", \"762\" = \"\"))  } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_operation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the series for a specific operation — get_metadata_series_operation","title":"Get all the series for a specific operation — get_metadata_series_operation","text":"Get series specific operation","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_operation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the series for a specific operation — get_metadata_series_operation","text":"","code":"get_metadata_series_operation(   operation = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   page = 1,   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_operation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the series for a specific operation — get_metadata_series_operation","text":"operation (string): code operation. obtain list available operations see get_metadata_operations(). det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated. Default value set 1. validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_operation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the series for a specific operation — get_metadata_series_operation","text":"Data frame information series belonging operation.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_operation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the series for a specific operation — get_metadata_series_operation","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_series_operation(operation = \"IPC\") get_metadata_series_operation(operation = \"IPC\", page = 2) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the series for a given table — get_metadata_series_table","title":"Get all the series for a given table — get_metadata_series_table","text":"Get series given table","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the series for a given table — get_metadata_series_table","text":"","code":"get_metadata_series_table(   idTable = NULL,   filter = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE,   metanames = FALSE,   metacodes = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the series for a given table — get_metadata_series_table","text":"idTable (int): id table. information ids click link. filter (list): list variables values. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. FALSE value means fewer API calls. Therefore, recommended set FALSE doubt validity input parameters, including filter. verbose (logical): print additional information, including URL call API service. metanames (logical): set TRUE extract name values defined table. names extracted metadata information (mandatory include 'M' tip parameter). Several columns created corresponding values different variables. metacodes (logical): set TRUE extract codes ids values defined table. codes ids extracted metadata information (mandatory include 'M' tip parameter). Several columns created corresponding values different variables.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_table.html","id":"filtering-data-from-tables","dir":"Reference","previous_headings":"","what":"Filtering data from tables","title":"Get all the series for a given table — get_metadata_series_table","text":"request data tables possibility filtering data fly using metadata information variables values define series. See get_metadata_table_varval() get values . different approaches build filter depending table type.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_table.html","id":"case-one-tempus-table","dir":"Reference","previous_headings":"","what":"Case one: tempus table","title":"Get all the series for a given table — get_metadata_series_table","text":"URL example. tempus table filter based ids. format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_table.html","id":"case-two-px-tables","dir":"Reference","previous_headings":"","what":"Case two: px tables","title":"Get all the series for a given table — get_metadata_series_table","text":"URL example. px table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\").","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_table.html","id":"case-three-tpx-table","dir":"Reference","previous_headings":"","what":"Case three: tpx table","title":"Get all the series for a given table — get_metadata_series_table","text":"URL example. tpx table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\"). URL example. tpx tables contain variable ids value ids. case, can use ids instead codes build filter. add alias ~id end id: list(id_variable1~id = id_value1~id, id_variable2~id = id_value2~id).","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_table.html","id":"using-shortcuts","dir":"Reference","previous_headings":"","what":"Using shortcuts","title":"Get all the series for a given table — get_metadata_series_table","text":"Additionally, shortcuts can used filter. simplify filtering approach using standardized names variable IDs therefore simplify use. format tempus table : list(shortcut_variable1 = name1, shortcut_variable2 = name2). However, px tpx tables format : list(values = c(name1, name2). values wrapper can also used tempus tables. see list available shortcuts, see get_filter_shortcuts() function. Let’s also remark better performance recommended use numeric ids tempus tables alphanumeric codes px tpx tables.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the series for a given table — get_metadata_series_table","text":"Data frame information series given table.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the series for a given table — get_metadata_series_table","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_series_table(idTable = 50902) get_metadata_series_table(idTable = 50902, filter = list(\"3\" = \"83\")) get_metadata_series_table(idTable = 50902, metanames = TRUE, metacodes = TRUE, tip = \"M\") } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the values for a given series — get_metadata_series_values","title":"Get all the values for a given series — get_metadata_series_values","text":"Get values given series","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the values for a given series — get_metadata_series_values","text":"","code":"get_metadata_series_values(   codSeries = NULL,   det = 0,   tip = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the values for a given series — get_metadata_series_values","text":"codSeries (string): code series. information codes click link. det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the values for a given series — get_metadata_series_values","text":"Data frame information values series according code specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the values for a given series — get_metadata_series_values","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_series_values(codSeries = \"IPC206449\") } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_varval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","title":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","text":"Get metadata information variables values series given operation","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_varval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","text":"","code":"get_metadata_series_varval(   operation = NULL,   lang = \"ES\",   det = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_varval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","text":"operation (string): code operation. obtain list available operations see get_metadata_operations(). lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. det (int): level detail. Valid values: 0, 1 2. validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_varval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","text":"Data frame information variables values define series according operation specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_series_varval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata information about the variables and values of series for a given operation — get_metadata_series_varval","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_series_varval(operation = \"IPC\") } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all groups for a specific a table — get_metadata_table_groups","title":"Get all groups for a specific a table — get_metadata_table_groups","text":"Get groups specific table","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all groups for a specific a table — get_metadata_table_groups","text":"","code":"get_metadata_table_groups(   idTable = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all groups for a specific a table — get_metadata_table_groups","text":"idTable (int): id table. information ids click link. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all groups for a specific a table — get_metadata_table_groups","text":"Data frame information groups according table specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all groups for a specific a table — get_metadata_table_groups","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_table_groups(idTable = 50902) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all values for a specific table group — get_metadata_table_values","title":"Get all values for a specific table group — get_metadata_table_values","text":"Get values specific table group","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all values for a specific table group — get_metadata_table_values","text":"","code":"get_metadata_table_values(   idTable = NULL,   idGroup = NULL,   det = 0,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all values for a specific table group — get_metadata_table_values","text":"idTable (int): id table. information ids click link. idGroup (int): id group variables. get groups specific table see get_metadata_table_groups(). det (int): level detail. Valid values: 0, 1 2. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all values for a specific table group — get_metadata_table_values","text":"Data frame information values table group according table group specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all values for a specific table group — get_metadata_table_values","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_table_values(idTable = 50902, idGroup = 110889) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_varval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"Get metadata information variables values given table","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_varval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"","code":"get_metadata_table_varval(   idTable = NULL,   det = 0,   filter = NULL,   lang = \"ES\",   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_varval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"idTable (int): id table. information ids click link. det (int): level detail. Valid values: 0, 1 2. filter (list): list variables values. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. validate (logical): validate input parameters.FALSE value means fewer API calls. Therefore, recommended set FALSE doubt validity input parameters, including filter. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_varval.html","id":"filtering-data-from-tables","dir":"Reference","previous_headings":"","what":"Filtering data from tables","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"request data tables possibility filtering data fly using metadata information variables values define series. different approaches build filter depending table type.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_varval.html","id":"case-one-tempus-table","dir":"Reference","previous_headings":"","what":"Case one: tempus table","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"URL example. tempus table filter based ids. format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_varval.html","id":"case-two-px-tables","dir":"Reference","previous_headings":"","what":"Case two: px tables","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"URL example. px table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\").","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_varval.html","id":"case-three-tpx-table","dir":"Reference","previous_headings":"","what":"Case three: tpx table","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"URL example. tpx table filter based codes. format list(cod_variable1 = cod_value1, cod_variable2 = cod_value2). Besides: variable can take one value: list(cod_variable1 = c(cod_value11, cod_value12), id_variable2 = cod_value2). variable can take empty character \"\" get possible values: list(cod_variable1 = cod_value1, cod_variable2 = \"\"). URL example. tpx tables contain variable ids value ids. case, can use ids instead codes build filter. add alias ~id end id: list(id_variable1~id = id_value1~id, id_variable2~id = id_value2~id).","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_varval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"Data frame information variables values define table according table specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_table_varval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata information about the variables and values for a given table — get_metadata_table_varval","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_table_varval(idTable = 50902) get_metadata_table_varval(idTable = 52056, filter = list(NAC = \"00\")) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_tables_operation.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all tables for a given operation — get_metadata_tables_operation","title":"Get all tables for a given operation — get_metadata_tables_operation","text":"Get tables given operation","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_tables_operation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all tables for a given operation — get_metadata_tables_operation","text":"","code":"get_metadata_tables_operation(   operation = NULL,   det = 0,   tip = NULL,   geo = NULL,   lang = \"ES\",   page = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_tables_operation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all tables for a given operation — get_metadata_tables_operation","text":"operation (string): code operation. obtain list available operations see get_metadata_operations(). det (int): level detail. Valid values: 0, 1 2. tip (string): set '' friendly output (e.g. readable dates), set 'M' include metadata set '' . geo (int): set 0 national tables set 1 tables greater level disaggregation. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English page (int): page number. retrieved result query paginated (page=0 retrieves pages). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_tables_operation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all tables for a given operation — get_metadata_tables_operation","text":"Data frame information available tables according operation specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_tables_operation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all tables for a given operation — get_metadata_tables_operation","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_tables_operation(operation = \"IPC\") } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all values for a specific variable — get_metadata_values","title":"Get all values for a specific variable — get_metadata_values","text":"Get values specific variable","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all values for a specific variable — get_metadata_values","text":"","code":"get_metadata_values(   operation = NULL,   variable = NULL,   value = NULL,   det = 0,   lang = \"ES\",   page = 0,   classification = NULL,   validate = TRUE,   verbose = FALSE,   hierarchy = NULL,   filter = NULL )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all values for a specific variable — get_metadata_values","text":"operation (string): code operation. Provide code get values given operation. obtain list available operations see get_metadata_operations(). variable (int): id variable. obtain list available variables see get_metadata_variables(). value (int): id value. id value specified, children value requested. obtain list available values variable use get_metadata_values(variable = id_variable). det (int): level detail. Valid values: 0, 1 2. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. page (int): page number. retrieved result query paginated (page=0 retrieves pages). classification (int): id classification. obtain list available classifications see get_metadata_classifications(). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service. hierarchy (int): depth hierarchy tree. filter (list): list variables values. request hierarchy tree possibility filtering using metadata information variables values define series. format list(id_variable1 = id_value1, id_variable2 = id_value2). Besides: variable can take one value: list(id_variable1 = c(id_value11, id_value12), id_variable2 = id_value2). variable can take empty character \"\" get possible values: list(id_variable1 = id_value1, id_variable2 = \"\").","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all values for a specific variable — get_metadata_values","text":"Data frame information available values variable specified function","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all values for a specific variable — get_metadata_values","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_values(variable = 115) get_metadata_values(operation = \"IPC\", variable = 115) } # }"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all available variables — get_metadata_variables","title":"Get all available variables — get_metadata_variables","text":"Get available variables","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all available variables — get_metadata_variables","text":"","code":"get_metadata_variables(   operation = NULL,   lang = \"ES\",   det = 0,   page = 0,   validate = TRUE,   verbose = FALSE )"},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all available variables — get_metadata_variables","text":"operation (string): Code operation. Provide code get variables given operation. obtain list available operations see get_metadata_operations(). operation specified variables shown. lang (string): language retrieved data. Set 'ES' Spanish set 'EN' English. det (int): level detail. Valid values: 0, 1 2. page (int): page number. retrieved result query paginated (page=0 retrieves pages). validate (logical): validate input parameters. FALSE value means fewer API calls. verbose (logical): print additional information, including URL call API service.","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all available variables — get_metadata_variables","text":"Data frame information available variables","code":""},{"path":"https://inedifusion.github.io/ineapir/reference/get_metadata_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all available variables — get_metadata_variables","text":"","code":"if (FALSE) { # \\dontrun{ get_metadata_variables() get_metadata_variables(operation = \"IPC\") } # }"},{"path":"https://inedifusion.github.io/ineapir/news/index.html","id":"ineapir-022","dir":"Changelog","previous_headings":"","what":"ineapir 0.2.2","title":"ineapir 0.2.2","text":"Added testing package Package description updated","code":""},{"path":"https://inedifusion.github.io/ineapir/news/index.html","id":"ineapir-021","dir":"Changelog","previous_headings":"","what":"ineapir 0.2.1","title":"ineapir 0.2.1","text":"Debugged error filter argument get_metadata values() function.","code":""},{"path":"https://inedifusion.github.io/ineapir/news/index.html","id":"ineapir-020","dir":"Changelog","previous_headings":"","what":"ineapir 0.2.0","title":"ineapir 0.2.0","text":"Added function get_metadata_classifications(). Added new funcionality get_metadata_values(): request values hierarchy trees. Added arguments value, classification, hierarchy filter get_metadata_values().","code":""},{"path":"https://inedifusion.github.io/ineapir/news/index.html","id":"ineapir-010","dir":"Changelog","previous_headings":"","what":"ineapir 0.1.0","title":"ineapir 0.1.0","text":"Added arguments dateStart y dateEnd get_data_table() allow multiple range dates. New filter funcionality: minus sign id added value, value excluded filter. Added argument detto get_metadata_table_varval(). Added argument detto get_metadata_variables().","code":""},{"path":"https://inedifusion.github.io/ineapir/news/index.html","id":"ineapir-0009000","dir":"Changelog","previous_headings":"","what":"ineapir 0.0.0.9000","title":"ineapir 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
